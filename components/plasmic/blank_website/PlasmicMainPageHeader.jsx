// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: qMKbWqzZjuHb1yLhCiN5Mq
// Component: 4f06qutaimSF
import * as React from "react";
import { useRouter } from "next/router";
import {
  PlasmicImg as PlasmicImg__,
  Stack as Stack__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import Button2 from "../../Button2"; // plasmic-import: lci14Q3sXnn8/component
import { useScreenVariants as useScreenVariants_9QPfl0YfbSni } from "./PlasmicGlobalVariant__Mobile"; // plasmic-import: 9qPFL0yfbSNI/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: qMKbWqzZjuHb1yLhCiN5Mq/projectcss
import sty from "./PlasmicMainPageHeader.module.css"; // plasmic-import: 4f06qutaimSF/css

createPlasmicElementProxy;

export const PlasmicMainPageHeader__VariantProps = new Array();

export const PlasmicMainPageHeader__ArgProps = new Array();

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicMainPageHeader__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const globalVariants = ensureGlobalVariants({
    mobile: useScreenVariants_9QPfl0YfbSni()
  });
  return (
    <section
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root
      )}
    >
      <Stack__
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox__xXqqB)}
      >
        <Stack__
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__ywBrH)}
        >
          <PlasmicImg__
            data-plasmic-name={"img"}
            data-plasmic-override={overrides.img}
            alt={""}
            className={classNames(sty.img)}
            displayHeight={"auto"}
            displayMaxHeight={"none"}
            displayMaxWidth={"100%"}
            displayMinHeight={"0"}
            displayMinWidth={"0"}
            displayWidth={"40px"}
            loading={"lazy"}
            src={{
              src: "/plasmic/blank_website/images/logoSecaasVmsPng.png",
              fullWidth: 188,
              fullHeight: 138,
              aspectRatio: undefined
            }}
          />

          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__vPaM9)}
          >
            <Button2
              data-plasmic-name={"btnFeatures"}
              data-plasmic-override={overrides.btnFeatures}
              className={classNames("__wab_instance", sty.btnFeatures)}
              color={"clear"}
              endIcon={
                <svg
                  className={classNames(projectcss.all, sty.svg__ms8W3)}
                  role={"img"}
                />
              }
              startIcon={
                <svg
                  className={classNames(projectcss.all, sty.svg__ya9V6)}
                  role={"img"}
                />
              }
              submitsForm={true}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__ieXsl
                )}
              >
                {"Features"}
              </div>
            </Button2>
            <Button2
              data-plasmic-name={"btnCompany"}
              data-plasmic-override={overrides.btnCompany}
              className={classNames("__wab_instance", sty.btnCompany)}
              color={"clear"}
              endIcon={
                <svg
                  className={classNames(projectcss.all, sty.svg__teXhi)}
                  role={"img"}
                />
              }
              startIcon={
                <svg
                  className={classNames(projectcss.all, sty.svg__bwm9A)}
                  role={"img"}
                />
              }
              submitsForm={true}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__dX4Hg
                )}
              >
                {"Company"}
              </div>
            </Button2>
            <Button2
              data-plasmic-name={"btnContact"}
              data-plasmic-override={overrides.btnContact}
              className={classNames("__wab_instance", sty.btnContact)}
              color={"clear"}
              endIcon={
                <svg
                  className={classNames(projectcss.all, sty.svg__wFybo)}
                  role={"img"}
                />
              }
              startIcon={
                <svg
                  className={classNames(projectcss.all, sty.svg__sq8Ee)}
                  role={"img"}
                />
              }
              submitsForm={true}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__vj4De
                )}
              >
                {"Contact"}
              </div>
            </Button2>
            <Button2
              data-plasmic-name={"btnLogin"}
              data-plasmic-override={overrides.btnLogin}
              className={classNames("__wab_instance", sty.btnLogin)}
              color={"blue"}
              endIcon={
                <svg
                  className={classNames(projectcss.all, sty.svg___1NaYp)}
                  role={"img"}
                />
              }
              showStartIcon={true}
              startIcon={
                <svg
                  className={classNames(projectcss.all, sty.svg__yAr1P)}
                  role={"img"}
                />
              }
              submitsForm={true}
            >
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__flJdt
                )}
              >
                {"Get started"}
              </div>
            </Button2>
          </Stack__>
          {false ? (
            <div className={classNames(projectcss.all, sty.freeBox__guq3B)}>
              <button
                data-plasmic-name={"button"}
                data-plasmic-override={overrides.button}
                className={classNames(
                  projectcss.all,
                  projectcss.button,
                  projectcss.__wab_text,
                  sty.button
                )}
              >
                {"Sign up"}
              </button>
              <Button2
                data-plasmic-name={"button2"}
                data-plasmic-override={overrides.button2}
                className={classNames("__wab_instance", sty.button2)}
                color={"clear"}
                endIcon={
                  <svg
                    className={classNames(projectcss.all, sty.svg__hgAZd)}
                    role={"img"}
                  />
                }
                startIcon={
                  <svg
                    className={classNames(projectcss.all, sty.svg__xzh)}
                    role={"img"}
                  />
                }
                submitsForm={true}
              >
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___9Kckg
                  )}
                >
                  {"Log in"}
                </div>
              </Button2>
            </div>
          ) : null}
        </Stack__>
      </Stack__>
    </section>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "img",
    "btnFeatures",
    "btnCompany",
    "btnContact",
    "btnLogin",
    "button",
    "button2"
  ],

  img: ["img"],
  btnFeatures: ["btnFeatures"],
  btnCompany: ["btnCompany"],
  btnContact: ["btnContact"],
  btnLogin: ["btnLogin"],
  button: ["button"],
  button2: ["button2"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicMainPageHeader__ArgProps,
          internalVariantPropNames: PlasmicMainPageHeader__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicMainPageHeader__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicMainPageHeader";
  } else {
    func.displayName = `PlasmicMainPageHeader.${nodeName}`;
  }
  return func;
}

export const PlasmicMainPageHeader = Object.assign(
  // Top-level PlasmicMainPageHeader renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    img: makeNodeComponent("img"),
    btnFeatures: makeNodeComponent("btnFeatures"),
    btnCompany: makeNodeComponent("btnCompany"),
    btnContact: makeNodeComponent("btnContact"),
    btnLogin: makeNodeComponent("btnLogin"),
    button: makeNodeComponent("button"),
    button2: makeNodeComponent("button2"),
    // Metadata about props expected for PlasmicMainPageHeader
    internalVariantProps: PlasmicMainPageHeader__VariantProps,
    internalArgProps: PlasmicMainPageHeader__ArgProps
  }
);

export default PlasmicMainPageHeader;
/* prettier-ignore-end */
