// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: qMKbWqzZjuHb1yLhCiN5Mq
// Component: 3imnKZ-iAV2D
import * as React from "react";
import { useRouter } from "next/router";
import {
  PlasmicImg as PlasmicImg__,
  Stack as Stack__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateStateOnChangeProp,
  generateStateValueProp,
  set as $stateSet,
  useDollarState
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import NavMenuItem from "../../NavMenuItem"; // plasmic-import: WbcFyNRVknUx/component
import { AntdModal } from "@plasmicpkgs/antd5/skinny/registerModal";
import SettingsSheet from "../../SettingsSheet"; // plasmic-import: xOE4M5xEAcvA/component
import { useScreenVariants as useScreenVariants_9QPfl0YfbSni } from "./PlasmicGlobalVariant__Mobile"; // plasmic-import: 9qPFL0yfbSNI/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: qMKbWqzZjuHb1yLhCiN5Mq/projectcss
import sty from "./PlasmicNavMenu.module.css"; // plasmic-import: 3imnKZ-iAV2D/css
import Building3SvgrepoComSvgIcon from "./icons/PlasmicIcon__Building3SvgrepoComSvg"; // plasmic-import: Rf7C0Vgmu0Zn/icon
import UserCirlceAddSvgrepoComSvgIcon from "./icons/PlasmicIcon__UserCirlceAddSvgrepoComSvg"; // plasmic-import: aq1t0PjDqNmi/icon
import UserOctagonSvgrepoComSvgIcon from "./icons/PlasmicIcon__UserOctagonSvgrepoComSvg"; // plasmic-import: ZNIK1Plt2HkI/icon
import BookSavedSvgrepoComSvgIcon from "./icons/PlasmicIcon__BookSavedSvgrepoComSvg"; // plasmic-import: beTsf8tVlWYp/icon
import GrammerlySvgrepoComSvgIcon from "./icons/PlasmicIcon__GrammerlySvgrepoComSvg"; // plasmic-import: uF5ee7wJSg2x/icon
import Setting3SvgrepoComSvgIcon from "./icons/PlasmicIcon__Setting3SvgrepoComSvg"; // plasmic-import: 7dMVjw9KPTQN/icon

createPlasmicElementProxy;

export const PlasmicNavMenu__VariantProps = new Array();

export const PlasmicNavMenu__ArgProps = new Array();

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicNavMenu__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "settingsSheet.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      }
    ],

    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });
  const globalVariants = ensureGlobalVariants({
    mobile: useScreenVariants_9QPfl0YfbSni()
  });
  return (
    <section
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root
      )}
    >
      <Stack__
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox__lntoE)}
      >
        <PlasmicImg__
          data-plasmic-name={"img"}
          data-plasmic-override={overrides.img}
          alt={""}
          className={classNames(sty.img)}
          displayHeight={"auto"}
          displayMaxHeight={"none"}
          displayMaxWidth={"100%"}
          displayMinHeight={"0"}
          displayMinWidth={"0"}
          displayWidth={"40px"}
          loading={"lazy"}
          src={{
            src: "/plasmic/blank_website/images/logoSecaasVmsPng.png",
            fullWidth: 188,
            fullHeight: 138,
            aspectRatio: undefined
          }}
        />

        <Stack__
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__g03Hp)}
        >
          <div className={classNames(projectcss.all, sty.freeBox__v7Nh)}>
            <NavMenuItem
              className={classNames("__wab_instance", sty.navMenuItem__we5RS)}
            >
              <Building3SvgrepoComSvgIcon
                className={classNames(projectcss.all, sty.svg__hnnNb)}
                role={"img"}
              />
            </NavMenuItem>
          </div>
          <div className={classNames(projectcss.all, sty.freeBox___6UxY6)}>
            <NavMenuItem
              className={classNames("__wab_instance", sty.navMenuItem__yEtH5)}
            >
              <UserCirlceAddSvgrepoComSvgIcon
                className={classNames(projectcss.all, sty.svg__nXwFq)}
                role={"img"}
              />
            </NavMenuItem>
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__onDrz)}>
            <NavMenuItem
              className={classNames("__wab_instance", sty.navMenuItem___91Uou)}
            >
              <UserOctagonSvgrepoComSvgIcon
                className={classNames(projectcss.all, sty.svg__d3MKe)}
                role={"img"}
              />
            </NavMenuItem>
          </div>
          <div className={classNames(projectcss.all, sty.freeBox__aEzj)}>
            <NavMenuItem
              className={classNames("__wab_instance", sty.navMenuItem__mFv4L)}
            >
              <BookSavedSvgrepoComSvgIcon
                className={classNames(projectcss.all, sty.svg__sw8Lr)}
                role={"img"}
              />
            </NavMenuItem>
          </div>
          <div
            className={classNames(projectcss.all, sty.freeBox__xr8DE)}
            onClick={async event => {
              const $steps = {};
              $steps["goToProfilePage"] = true
                ? (() => {
                    const actionArgs = { destination: `/user/profile` };
                    return (({ destination }) => {
                      if (
                        typeof destination === "string" &&
                        destination.startsWith("#")
                      ) {
                        document
                          .getElementById(destination.substr(1))
                          .scrollIntoView({ behavior: "smooth" });
                      } else {
                        __nextRouter?.push(destination);
                      }
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["goToProfilePage"] != null &&
                typeof $steps["goToProfilePage"] === "object" &&
                typeof $steps["goToProfilePage"].then === "function"
              ) {
                $steps["goToProfilePage"] = await $steps["goToProfilePage"];
              }
            }}
          >
            <NavMenuItem
              className={classNames("__wab_instance", sty.navMenuItem__ieQam)}
            >
              <GrammerlySvgrepoComSvgIcon
                className={classNames(projectcss.all, sty.svg__orXww)}
                role={"img"}
              />
            </NavMenuItem>
          </div>
          <div
            className={classNames(projectcss.all, sty.freeBox__lMobc)}
            onClick={async event => {
              const $steps = {};
              $steps["updateSettingsSheetOpen"] = true
                ? (() => {
                    const actionArgs = {
                      variable: {
                        objRoot: $state,
                        variablePath: ["settingsSheet", "open"]
                      },
                      operation: 0,
                      value: true
                    };
                    return (({ variable, value, startIndex, deleteCount }) => {
                      if (!variable) {
                        return;
                      }
                      const { objRoot, variablePath } = variable;
                      $stateSet(objRoot, variablePath, value);
                      return value;
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["updateSettingsSheetOpen"] != null &&
                typeof $steps["updateSettingsSheetOpen"] === "object" &&
                typeof $steps["updateSettingsSheetOpen"].then === "function"
              ) {
                $steps["updateSettingsSheetOpen"] = await $steps[
                  "updateSettingsSheetOpen"
                ];
              }
            }}
          >
            <NavMenuItem
              className={classNames("__wab_instance", sty.navMenuItem__czqLh)}
            >
              <Setting3SvgrepoComSvgIcon
                className={classNames(projectcss.all, sty.svg__tsGpu)}
                role={"img"}
              />
            </NavMenuItem>
          </div>
        </Stack__>
      </Stack__>
      <AntdModal
        data-plasmic-name={"settingsSheet"}
        data-plasmic-override={overrides.settingsSheet}
        className={classNames("__wab_instance", sty.settingsSheet)}
        defaultStylesClassName={classNames(
          projectcss.root_reset,
          projectcss.plasmic_default_styles,
          projectcss.plasmic_mixins,
          projectcss.plasmic_tokens,
          plasmic_antd_5_hostless_css.plasmic_tokens,
          plasmic_plasmic_rich_components_css.plasmic_tokens
        )}
        footer={
          <div className={classNames(projectcss.all, sty.freeBox__fXQl)} />
        }
        modalContentClassName={classNames({ [sty["pcls_zw1_k43GSrpz"]]: true })}
        modalScopeClassName={sty["settingsSheet__modal"]}
        onOpenChange={generateStateOnChangeProp($state, [
          "settingsSheet",
          "open"
        ])}
        open={generateStateValueProp($state, ["settingsSheet", "open"])}
        title={null}
        trigger={null}
        width={"100%"}
        wrapClassName={classNames({ [sty["pcls_nAtB7QgKpfyb"]]: true })}
      >
        <SettingsSheet
          className={classNames("__wab_instance", sty.settingsSheet__mn0Ll)}
        />
      </AntdModal>
    </section>
  );
}

const PlasmicDescendants = {
  root: ["root", "img", "settingsSheet"],
  img: ["img"],
  settingsSheet: ["settingsSheet"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicNavMenu__ArgProps,
          internalVariantPropNames: PlasmicNavMenu__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicNavMenu__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicNavMenu";
  } else {
    func.displayName = `PlasmicNavMenu.${nodeName}`;
  }
  return func;
}

export const PlasmicNavMenu = Object.assign(
  // Top-level PlasmicNavMenu renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    img: makeNodeComponent("img"),
    settingsSheet: makeNodeComponent("settingsSheet"),
    // Metadata about props expected for PlasmicNavMenu
    internalVariantProps: PlasmicNavMenu__VariantProps,
    internalArgProps: PlasmicNavMenu__ArgProps
  }
);

export default PlasmicNavMenu;
/* prettier-ignore-end */
