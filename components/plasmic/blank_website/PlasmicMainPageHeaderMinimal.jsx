// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: qMKbWqzZjuHb1yLhCiN5Mq
// Component: 8Q71FYMQzUgF
import * as React from "react";
import { useRouter } from "next/router";
import {
  PlasmicImg as PlasmicImg__,
  Stack as Stack__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import { useScreenVariants as useScreenVariants_9QPfl0YfbSni } from "./PlasmicGlobalVariant__Mobile"; // plasmic-import: 9qPFL0yfbSNI/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: qMKbWqzZjuHb1yLhCiN5Mq/projectcss
import sty from "./PlasmicMainPageHeaderMinimal.module.css"; // plasmic-import: 8Q71FYMQzUgF/css

createPlasmicElementProxy;

export const PlasmicMainPageHeaderMinimal__VariantProps = new Array();

export const PlasmicMainPageHeaderMinimal__ArgProps = new Array();

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicMainPageHeaderMinimal__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const globalVariants = ensureGlobalVariants({
    mobile: useScreenVariants_9QPfl0YfbSni()
  });
  return (
    <section
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root
      )}
    >
      <Stack__
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox__sQ51W)}
      >
        <Stack__
          as={"div"}
          hasGap={true}
          className={classNames(projectcss.all, sty.freeBox__av7LB)}
        >
          <PlasmicImg__
            data-plasmic-name={"img"}
            data-plasmic-override={overrides.img}
            alt={""}
            className={classNames(sty.img)}
            displayHeight={"auto"}
            displayMaxHeight={"none"}
            displayMaxWidth={"100%"}
            displayMinHeight={"0"}
            displayMinWidth={"0"}
            displayWidth={"40px"}
            loading={"lazy"}
            src={{
              src: "/plasmic/blank_website/images/logoSecaasVmsPng.png",
              fullWidth: 188,
              fullHeight: 138,
              aspectRatio: undefined
            }}
          />
        </Stack__>
      </Stack__>
    </section>
  );
}

const PlasmicDescendants = {
  root: ["root", "img"],
  img: ["img"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicMainPageHeaderMinimal__ArgProps,
          internalVariantPropNames: PlasmicMainPageHeaderMinimal__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicMainPageHeaderMinimal__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicMainPageHeaderMinimal";
  } else {
    func.displayName = `PlasmicMainPageHeaderMinimal.${nodeName}`;
  }
  return func;
}

export const PlasmicMainPageHeaderMinimal = Object.assign(
  // Top-level PlasmicMainPageHeaderMinimal renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    img: makeNodeComponent("img"),
    // Metadata about props expected for PlasmicMainPageHeaderMinimal
    internalVariantProps: PlasmicMainPageHeaderMinimal__VariantProps,
    internalArgProps: PlasmicMainPageHeaderMinimal__ArgProps
  }
);

export default PlasmicMainPageHeaderMinimal;
/* prettier-ignore-end */
