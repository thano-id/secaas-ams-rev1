// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: qMKbWqzZjuHb1yLhCiN5Mq
// Component: lRSRG8YACsJd
import * as React from "react";
import { useRouter } from "next/router";
import {
  Stack as Stack__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: qMKbWqzZjuHb1yLhCiN5Mq/projectcss
import sty from "./PlasmicSideMenuSectionHead.module.css"; // plasmic-import: lRSRG8YACsJd/css

createPlasmicElementProxy;

export const PlasmicSideMenuSectionHead__VariantProps = new Array();

export const PlasmicSideMenuSectionHead__ArgProps = new Array(
  "title",
  "subtitle"
);

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicSideMenuSectionHead__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  return (
    <Stack__
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root
      )}
    >
      <div
        data-plasmic-name={"freeBox"}
        data-plasmic-override={overrides.freeBox}
        className={classNames(projectcss.all, sty.freeBox)}
      >
        <h6
          data-plasmic-name={"menuSectionTitle"}
          data-plasmic-override={overrides.menuSectionTitle}
          className={classNames(
            projectcss.all,
            projectcss.h6,
            projectcss.__wab_text,
            sty.menuSectionTitle
          )}
        >
          <React.Fragment>
            {(() => {
              try {
                return $props.title;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return "Settings";
                }
                throw e;
              }
            })()}
          </React.Fragment>
        </h6>
        {(() => {
          try {
            return $props.subtitle;
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return true;
            }
            throw e;
          }
        })() ? (
          <sub
            data-plasmic-name={"menuSectionSubtitle"}
            data-plasmic-override={overrides.menuSectionSubtitle}
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.menuSectionSubtitle
            )}
          >
            <React.Fragment>
              {(() => {
                try {
                  return $props.subtitle;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return "Settings";
                  }
                  throw e;
                }
              })()}
            </React.Fragment>
          </sub>
        ) : null}
      </div>
    </Stack__>
  );
}

const PlasmicDescendants = {
  root: ["root", "freeBox", "menuSectionTitle", "menuSectionSubtitle"],
  freeBox: ["freeBox", "menuSectionTitle", "menuSectionSubtitle"],
  menuSectionTitle: ["menuSectionTitle"],
  menuSectionSubtitle: ["menuSectionSubtitle"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicSideMenuSectionHead__ArgProps,
          internalVariantPropNames: PlasmicSideMenuSectionHead__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicSideMenuSectionHead__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSideMenuSectionHead";
  } else {
    func.displayName = `PlasmicSideMenuSectionHead.${nodeName}`;
  }
  return func;
}

export const PlasmicSideMenuSectionHead = Object.assign(
  // Top-level PlasmicSideMenuSectionHead renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    freeBox: makeNodeComponent("freeBox"),
    menuSectionTitle: makeNodeComponent("menuSectionTitle"),
    menuSectionSubtitle: makeNodeComponent("menuSectionSubtitle"),
    // Metadata about props expected for PlasmicSideMenuSectionHead
    internalVariantProps: PlasmicSideMenuSectionHead__VariantProps,
    internalArgProps: PlasmicSideMenuSectionHead__ArgProps
  }
);

export default PlasmicSideMenuSectionHead;
/* prettier-ignore-end */
