// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: qMKbWqzZjuHb1yLhCiN5Mq
// Component: ToMbPngmeHPx
import * as React from "react";
import Head from "next/head";
import { useRouter } from "next/router";
import {
  PlasmicImg as PlasmicImg__,
  Stack as Stack__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateStateOnChangeProp,
  generateStateValueProp,
  useDollarState
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";
import {
  executePlasmicDataOp,
  usePlasmicInvalidate
} from "@plasmicapp/react-web/lib/data-sources";
import { SideEffect } from "@plasmicpkgs/plasmic-basic-components";
import Button2 from "../../Button2"; // plasmic-import: lci14Q3sXnn8/component
import { useScreenVariants as useScreenVariants_9QPfl0YfbSni } from "./PlasmicGlobalVariant__Mobile"; // plasmic-import: 9qPFL0yfbSNI/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: qMKbWqzZjuHb1yLhCiN5Mq/projectcss
import sty from "./PlasmicHomePage.module.css"; // plasmic-import: ToMbPngmeHPx/css
import VerifySvgrepoComSvgIcon from "./icons/PlasmicIcon__VerifySvgrepoComSvg"; // plasmic-import: Cm50eZP2Rdw9/icon
import TwitterSvgrepoComSvgIcon from "./icons/PlasmicIcon__TwitterSvgrepoComSvg"; // plasmic-import: 8AU18hu3d0PV/icon
import FacebookSvgrepoComSvgIcon from "./icons/PlasmicIcon__FacebookSvgrepoComSvg"; // plasmic-import: SST1-wFOYZQ3/icon
import YoutubeSvgrepoComSvgIcon from "./icons/PlasmicIcon__YoutubeSvgrepoComSvg"; // plasmic-import: bhngz8mTgbAr/icon
import { log as __fn_logger__log } from "../../../pages/utils_logger"; // plasmic-import: logger.log/customFunction
import { loggedIn as __fn_user__loggedIn } from "../../../pages/utils_user"; // plasmic-import: user.loggedIn/customFunction

createPlasmicElementProxy;

export const PlasmicHomePage__VariantProps = new Array();

export const PlasmicHomePage__ArgProps = new Array();

const $$ = {
  logger: {
    log: __fn_logger__log
  },
  user: {
    loggedIn: __fn_user__loggedIn
  }
};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicHomePage__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "email.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "indoomni@gmail.com"
      },
      {
        path: "password.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => "123456"
      },
      {
        path: "showLoginForm",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      }
    ],

    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });
  const dataSourcesCtx = usePlasmicDataSourceContext();
  const plasmicInvalidate = usePlasmicInvalidate();
  const globalVariants = ensureGlobalVariants({
    mobile: useScreenVariants_9QPfl0YfbSni()
  });
  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
        <title key="title">{PlasmicHomePage.pageMetadata.title}</title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicHomePage.pageMetadata.title}
        />

        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicHomePage.pageMetadata.title}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"home"}
          data-plasmic-override={overrides.home}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.home
          )}
        >
          <SideEffect
            data-plasmic-name={"sideEffect"}
            data-plasmic-override={overrides.sideEffect}
            className={classNames("__wab_instance", sty.sideEffect)}
            onMount={async () => {
              const $steps = {};
              $steps["runCode"] = true
                ? (() => {
                    const actionArgs = {
                      customFunction: async () => {
                        return $$.logger.log("Hi, ganteng!");
                      }
                    };
                    return (({ customFunction }) => {
                      return customFunction();
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["runCode"] != null &&
                typeof $steps["runCode"] === "object" &&
                typeof $steps["runCode"].then === "function"
              ) {
                $steps["runCode"] = await $steps["runCode"];
              }
            }}
          />

          <Stack__
            as={"div"}
            data-plasmic-name={"header"}
            data-plasmic-override={overrides.header}
            hasGap={true}
            className={classNames(projectcss.all, sty.header)}
          >
            <div className={classNames(projectcss.all, sty.freeBox___8M0Dp)}>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__ccVsY)}
              >
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__fjF8P)}
                >
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__yh7Ye)}
                    displayHeight={"auto"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"100%"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"40px"}
                    loading={"lazy"}
                    src={{
                      src: "/plasmic/blank_website/images/logoSecaasVmsPng.png",
                      fullWidth: 188,
                      fullHeight: 138,
                      aspectRatio: undefined
                    }}
                  />

                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__cIfs5)}
                  >
                    <Button2
                      data-plasmic-name={"btnFeatures"}
                      data-plasmic-override={overrides.btnFeatures}
                      className={classNames("__wab_instance", sty.btnFeatures)}
                      color={"clear"}
                      endIcon={
                        <svg
                          className={classNames(projectcss.all, sty.svg__vnyoi)}
                          role={"img"}
                        />
                      }
                      startIcon={
                        <svg
                          className={classNames(projectcss.all, sty.svg__aRuiR)}
                          role={"img"}
                        />
                      }
                      submitsForm={true}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__k7UOv
                        )}
                      >
                        {"Features"}
                      </div>
                    </Button2>
                    <Button2
                      data-plasmic-name={"btnCompany"}
                      data-plasmic-override={overrides.btnCompany}
                      className={classNames("__wab_instance", sty.btnCompany)}
                      color={"clear"}
                      endIcon={
                        <svg
                          className={classNames(projectcss.all, sty.svg__sa6Ut)}
                          role={"img"}
                        />
                      }
                      startIcon={
                        <svg
                          className={classNames(projectcss.all, sty.svg__c70)}
                          role={"img"}
                        />
                      }
                      submitsForm={true}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__kZS
                        )}
                      >
                        {"Company"}
                      </div>
                    </Button2>
                    <Button2
                      data-plasmic-name={"btnContact"}
                      data-plasmic-override={overrides.btnContact}
                      className={classNames("__wab_instance", sty.btnContact)}
                      color={"clear"}
                      endIcon={
                        <svg
                          className={classNames(projectcss.all, sty.svg__k83Tu)}
                          role={"img"}
                        />
                      }
                      startIcon={
                        <svg
                          className={classNames(
                            projectcss.all,
                            sty.svg___1KCbv
                          )}
                          role={"img"}
                        />
                      }
                      submitsForm={true}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__wRnQf
                        )}
                      >
                        {"Contact"}
                      </div>
                    </Button2>
                    <Button2
                      data-plasmic-name={"btnLogin"}
                      data-plasmic-override={overrides.btnLogin}
                      className={classNames("__wab_instance", sty.btnLogin)}
                      color={"blue"}
                      endIcon={
                        <svg
                          className={classNames(
                            projectcss.all,
                            sty.svg___5R3N2
                          )}
                          role={"img"}
                        />
                      }
                      showStartIcon={true}
                      startIcon={
                        <svg
                          className={classNames(projectcss.all, sty.svg__io84Z)}
                          role={"img"}
                        />
                      }
                      submitsForm={true}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__f9Nan
                        )}
                      >
                        {"Get started"}
                      </div>
                    </Button2>
                  </Stack__>
                  {false ? (
                    <div
                      className={classNames(projectcss.all, sty.freeBox___3EUn)}
                    >
                      <button
                        data-plasmic-name={"button"}
                        data-plasmic-override={overrides.button}
                        className={classNames(
                          projectcss.all,
                          projectcss.button,
                          projectcss.__wab_text,
                          sty.button
                        )}
                      >
                        {"Sign up"}
                      </button>
                      <Button2
                        className={classNames(
                          "__wab_instance",
                          sty.button2___4XeP
                        )}
                        color={"clear"}
                        endIcon={
                          <svg
                            className={classNames(
                              projectcss.all,
                              sty.svg__tkVsC
                            )}
                            role={"img"}
                          />
                        }
                        startIcon={
                          <svg
                            className={classNames(
                              projectcss.all,
                              sty.svg__uzxIq
                            )}
                            role={"img"}
                          />
                        }
                        submitsForm={true}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__sXvjc
                          )}
                        >
                          {"Log in"}
                        </div>
                      </Button2>
                    </div>
                  ) : null}
                </Stack__>
              </Stack__>
            </div>
            <Stack__
              as={"div"}
              data-plasmic-name={"loginForm"}
              data-plasmic-override={overrides.loginForm}
              hasGap={true}
              className={classNames(projectcss.all, sty.loginForm)}
            >
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__cNk0X)}
              >
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox___7Xgd7)}
                >
                  <div
                    className={classNames(projectcss.all, sty.freeBox__uvRR)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___2H88X
                      )}
                    >
                      {"Updated!"}
                    </div>
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__vvF5T
                    )}
                  >
                    <React.Fragment>
                      <span
                        className={"plasmic_default__all plasmic_default__span"}
                        style={{ textDecoration: "underline" }}
                      >
                        {"Hello! Nice having you again."}
                      </span>
                    </React.Fragment>
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__o8FKc
                    )}
                  >
                    {"Enter your credentials to sign in."}
                  </div>
                </Stack__>
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__sHpTg)}
                >
                  <Button2
                    className={classNames("__wab_instance", sty.button2__yXcO)}
                    color={"red"}
                    endIcon={
                      <svg
                        className={classNames(projectcss.all, sty.svg__gcCvV)}
                        role={"img"}
                      />
                    }
                    link={"https://google.com"}
                    startIcon={
                      <svg
                        className={classNames(projectcss.all, sty.svg__iWPm)}
                        role={"img"}
                      />
                    }
                    submitsForm={false}
                    target={true}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__l7Zvk
                      )}
                    >
                      {"I don't have an account"}
                    </div>
                  </Button2>
                </Stack__>
              </Stack__>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__t9Lj)}
              >
                <div className={classNames(projectcss.all, sty.freeBox__fyU28)}>
                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox___6Pu4J)}
                  >
                    <Stack__
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__kIwtF)}
                    >
                      <input
                        data-plasmic-name={"email"}
                        data-plasmic-override={overrides.email}
                        className={classNames(
                          projectcss.all,
                          projectcss.input,
                          sty.email
                        )}
                        onChange={e => {
                          generateStateOnChangeProp($state, ["email", "value"])(
                            e.target.value
                          );
                        }}
                        placeholder={"Your registered email address"}
                        ref={ref => {
                          $refs["email"] = ref;
                        }}
                        size={1}
                        type={"email"}
                        value={
                          generateStateValueProp($state, ["email", "value"]) ??
                          ""
                        }
                      />

                      <input
                        data-plasmic-name={"password"}
                        data-plasmic-override={overrides.password}
                        className={classNames(
                          projectcss.all,
                          projectcss.input,
                          sty.password
                        )}
                        disabled={undefined}
                        onChange={e => {
                          generateStateOnChangeProp($state, [
                            "password",
                            "value"
                          ])(e.target.value);
                        }}
                        placeholder={"Your password"}
                        ref={ref => {
                          $refs["password"] = ref;
                        }}
                        size={1}
                        type={"password"}
                        value={
                          generateStateValueProp($state, [
                            "password",
                            "value"
                          ]) ?? ""
                        }
                      />
                    </Stack__>
                    <Button2
                      className={classNames(
                        "__wab_instance",
                        sty.button2__fhmMn
                      )}
                      endIcon={
                        <svg
                          className={classNames(projectcss.all, sty.svg__jobQr)}
                          role={"img"}
                        />
                      }
                      onClick={async event => {
                        const $steps = {};
                        $steps["httpPost"] = true
                          ? (() => {
                              const actionArgs = {
                                dataOp: {
                                  sourceId: "9qjX5dCe3WEpTMCp4MyMNP",
                                  opId: "1162ac5b-a577-4dda-9ef9-cbe161b2aab2",
                                  userArgs: {
                                    body: [
                                      $state.email.value,
                                      $state.password.value
                                    ]
                                  },
                                  cacheKey: null,
                                  invalidatedKeys: ["plasmic_refresh_all"],
                                  roleId: null
                                }
                              };
                              return (async ({ dataOp, continueOnError }) => {
                                try {
                                  const response = await executePlasmicDataOp(
                                    dataOp,
                                    {
                                      userAuthToken:
                                        dataSourcesCtx?.userAuthToken,
                                      user: dataSourcesCtx?.user
                                    }
                                  );
                                  await plasmicInvalidate(
                                    dataOp.invalidatedKeys
                                  );
                                  return response;
                                } catch (e) {
                                  if (!continueOnError) {
                                    throw e;
                                  }
                                  return e;
                                }
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["httpPost"] != null &&
                          typeof $steps["httpPost"] === "object" &&
                          typeof $steps["httpPost"].then === "function"
                        ) {
                          $steps["httpPost"] = await $steps["httpPost"];
                        }
                        $steps["runCode"] = true
                          ? (() => {
                              const actionArgs = {
                                customFunction: async () => {
                                  return $$.user.loggedIn(
                                    $steps.httpPost.data.response.jwt,
                                    $steps.httpPost.data.response.user
                                  );
                                }
                              };
                              return (({ customFunction }) => {
                                return customFunction();
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["runCode"] != null &&
                          typeof $steps["runCode"] === "object" &&
                          typeof $steps["runCode"].then === "function"
                        ) {
                          $steps["runCode"] = await $steps["runCode"];
                        }
                        $steps["goToProfilePage"] = true
                          ? (() => {
                              const actionArgs = {
                                destination: `/user/profile`
                              };
                              return (({ destination }) => {
                                if (
                                  typeof destination === "string" &&
                                  destination.startsWith("#")
                                ) {
                                  document
                                    .getElementById(destination.substr(1))
                                    .scrollIntoView({ behavior: "smooth" });
                                } else {
                                  __nextRouter?.push(destination);
                                }
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["goToProfilePage"] != null &&
                          typeof $steps["goToProfilePage"] === "object" &&
                          typeof $steps["goToProfilePage"].then === "function"
                        ) {
                          $steps["goToProfilePage"] = await $steps[
                            "goToProfilePage"
                          ];
                        }
                      }}
                      startIcon={
                        <svg
                          className={classNames(
                            projectcss.all,
                            sty.svg___5RZjD
                          )}
                          role={"img"}
                        />
                      }
                      submitsForm={true}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___2C78S
                        )}
                      >
                        {"Sign in ->"}
                      </div>
                    </Button2>
                  </Stack__>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__aOjLn)}
                  />

                  <div
                    className={classNames(projectcss.all, sty.freeBox___1XyJ3)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__xlsM
                      )}
                    >
                      <React.Fragment>
                        <React.Fragment>
                          {"To sign in, you need to have an active "}
                        </React.Fragment>
                        <span
                          className={
                            "plasmic_default__all plasmic_default__span"
                          }
                          style={{ fontWeight: 700 }}
                        >
                          {"SECaaS"}
                        </span>
                        <React.Fragment>
                          {
                            " account. \n\nDon't have an account yet? Contact us at "
                          }
                        </React.Fragment>
                        <span
                          className={
                            "plasmic_default__all plasmic_default__span"
                          }
                          style={{ fontWeight: 700 }}
                        >
                          {"secaas@thano.id"}
                        </span>
                        <React.Fragment>
                          {
                            " or click here and fill out a simple form. We'll contact you right away. "
                          }
                        </React.Fragment>
                      </React.Fragment>
                    </div>
                  </div>
                </div>
              </Stack__>
            </Stack__>
          </Stack__>
          <Stack__
            as={"div"}
            data-plasmic-name={"hero"}
            data-plasmic-override={overrides.hero}
            hasGap={true}
            className={classNames(projectcss.all, sty.hero)}
          >
            <div className={classNames(projectcss.all, sty.columns__zJsd)}>
              <div className={classNames(projectcss.all, sty.column__qmLj1)}>
                <PlasmicImg__
                  alt={""}
                  className={classNames(sty.img__xqae3)}
                  displayHeight={"100%"}
                  displayMaxHeight={"none"}
                  displayMaxWidth={"none"}
                  displayMinHeight={"320px"}
                  displayMinWidth={"0"}
                  displayWidth={"100%"}
                  src={
                    "https://images.unsplash.com/photo-1530099486328-e021101a494a?ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&ixlib=rb-1.2.1&auto=format&fit=crop&w=2916&q=80"
                  }
                />

                <div
                  data-plasmic-name={"background2"}
                  data-plasmic-override={overrides.background2}
                  className={classNames(projectcss.all, sty.background2)}
                />
              </div>
              <div className={classNames(projectcss.all, sty.column__cjVpt)}>
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox___3GQlg)}
                >
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"copy"}
                    data-plasmic-override={overrides.copy}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.copy)}
                  >
                    <Stack__
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__fiQ3F)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__vdTnO
                        )}
                      >
                        {"Welcome"}
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___57J76
                        )}
                      >
                        {"Let's get going"}
                      </div>
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__yCuyK
                        )}
                      >
                        {
                          "Consectetur a adipiscing sagittis sed proin libero himenaeos ornare adipiscing suscipit leo vestibulum facilisi consequat nisi nisi adipiscing habitant facilisis suspendisse hac integer eget quam facilisis sem placerat fames."
                        }
                      </div>
                    </Stack__>
                    <Stack__
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__rOjMh)}
                    >
                      <Button2
                        className={classNames(
                          "__wab_instance",
                          sty.button2__ruGTx
                        )}
                        color={"blue"}
                        endIcon={
                          <svg
                            className={classNames(
                              projectcss.all,
                              sty.svg__vGoVe
                            )}
                            role={"img"}
                          />
                        }
                        startIcon={
                          <svg
                            className={classNames(
                              projectcss.all,
                              sty.svg__f65D8
                            )}
                            role={"img"}
                          />
                        }
                        submitsForm={true}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__xQhc5
                          )}
                        >
                          {"Start now ->"}
                        </div>
                      </Button2>
                      <Button2
                        className={classNames(
                          "__wab_instance",
                          sty.button2__upLte
                        )}
                        color={"clear"}
                        endIcon={
                          <svg
                            className={classNames(
                              projectcss.all,
                              sty.svg__qeZvM
                            )}
                            role={"img"}
                          />
                        }
                        startIcon={
                          <svg
                            className={classNames(
                              projectcss.all,
                              sty.svg__b9OZc
                            )}
                            role={"img"}
                          />
                        }
                        submitsForm={true}
                      >
                        <div
                          className={classNames(
                            projectcss.all,
                            projectcss.__wab_text,
                            sty.text__fEzGu
                          )}
                        >
                          {"Learn more\u2026"}
                        </div>
                      </Button2>
                    </Stack__>
                  </Stack__>
                </Stack__>
              </div>
            </div>
          </Stack__>
          <Stack__
            as={"section"}
            data-plasmic-name={"features"}
            data-plasmic-override={overrides.features}
            hasGap={true}
            className={classNames(projectcss.all, sty.features)}
          >
            <Stack__
              as={"div"}
              data-plasmic-name={"foreground"}
              data-plasmic-override={overrides.foreground}
              hasGap={true}
              className={classNames(projectcss.all, sty.foreground)}
            >
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.columns__ncHj1)}
              >
                <div className={classNames(projectcss.all, sty.column__y7Uho)}>
                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__hNaLy)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__pB7E
                      )}
                    >
                      {"Freedoms"}
                    </div>
                    <h2
                      data-plasmic-name={"h2"}
                      data-plasmic-override={overrides.h2}
                      className={classNames(
                        projectcss.all,
                        projectcss.h2,
                        projectcss.__wab_text,
                        sty.h2
                      )}
                    >
                      {"Open by design"}
                    </h2>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___4YpW
                      )}
                    >
                      {
                        "Vitae sed sem a justo mauris potenti a primis vivamus justo tempor viverra adipiscing convallis fusce odio condimentum mi parturient ultricies."
                      }
                    </div>
                    <Button2
                      className={classNames(
                        "__wab_instance",
                        sty.button2__kKmuW
                      )}
                      color={"clear"}
                      endIcon={
                        <svg
                          className={classNames(projectcss.all, sty.svg__mzwHf)}
                          role={"img"}
                        />
                      }
                      size={"minimal"}
                      startIcon={
                        <svg
                          className={classNames(projectcss.all, sty.svg__tlnzI)}
                          role={"img"}
                        />
                      }
                      submitsForm={true}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__hkzHf
                        )}
                      >
                        {"Learn more"}
                      </div>
                    </Button2>
                  </Stack__>
                </div>
                <div className={classNames(projectcss.all, sty.column__jI0M)}>
                  <div
                    className={classNames(projectcss.all, sty.freeBox__tVkE5)}
                  >
                    <Stack__
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__ccPfq)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__ylXw7
                        )}
                      >
                        {"Built on capability"}
                      </div>
                      <VerifySvgrepoComSvgIcon
                        className={classNames(projectcss.all, sty.svg___3LiNb)}
                        role={"img"}
                      />
                    </Stack__>
                    <Stack__
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__yFqI)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__qfpZo
                        )}
                      >
                        {"Highly energetic"}
                      </div>
                      <VerifySvgrepoComSvgIcon
                        className={classNames(projectcss.all, sty.svg___3FGsU)}
                        role={"img"}
                      />
                    </Stack__>
                    <Stack__
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__cC9Kh)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___7I4G
                        )}
                      >
                        {"100% transparency and accountability"}
                      </div>
                      <VerifySvgrepoComSvgIcon
                        className={classNames(projectcss.all, sty.svg__lgbYe)}
                        role={"img"}
                      />
                    </Stack__>
                    <Stack__
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__e9Bu6)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text___8B22Q
                        )}
                      >
                        {"Refreshing clarity"}
                      </div>
                      <VerifySvgrepoComSvgIcon
                        className={classNames(projectcss.all, sty.svg__k8Bnb)}
                        role={"img"}
                      />
                    </Stack__>
                    <Stack__
                      as={"div"}
                      hasGap={true}
                      className={classNames(projectcss.all, sty.freeBox__dif4A)}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__r7W1S
                        )}
                      >
                        {"Modern results"}
                      </div>
                      <VerifySvgrepoComSvgIcon
                        className={classNames(projectcss.all, sty.svg__gxmQa)}
                        role={"img"}
                      />
                    </Stack__>
                  </div>
                </div>
              </Stack__>
            </Stack__>
          </Stack__>
          <div className={classNames(projectcss.all, sty.freeBox___37Hqc)}>
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.columns__dVA4)}
            >
              <div className={classNames(projectcss.all, sty.column__ice7)}>
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__uFuuw)}
                >
                  <PlasmicImg__
                    alt={""}
                    className={classNames(sty.img__kkNWj)}
                    displayHeight={"40px"}
                    displayMaxHeight={"none"}
                    displayMaxWidth={"none"}
                    displayMinHeight={"0"}
                    displayMinWidth={"0"}
                    displayWidth={"40px"}
                    src={{
                      src: "/plasmic/blank_website/images/logoSecaasVmsPng.png",
                      fullWidth: 188,
                      fullHeight: 138,
                      aspectRatio: undefined
                    }}
                  />

                  <Stack__
                    as={"div"}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.freeBox__onrgY)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__qrkRk
                      )}
                    >
                      {"Connect with us"}
                    </div>
                    <Stack__
                      as={"div"}
                      hasGap={true}
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___2R40V
                      )}
                    >
                      <TwitterSvgrepoComSvgIcon
                        className={classNames(projectcss.all, sty.svg__oYs7P)}
                        role={"img"}
                      />

                      <FacebookSvgrepoComSvgIcon
                        className={classNames(projectcss.all, sty.svg__vLzqu)}
                        role={"img"}
                      />

                      <YoutubeSvgrepoComSvgIcon
                        className={classNames(projectcss.all, sty.svg__niN79)}
                        role={"img"}
                      />
                    </Stack__>
                  </Stack__>
                </Stack__>
              </div>
              <div className={classNames(projectcss.all, sty.column__yCSzE)}>
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__awaZf)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__yeW0U
                    )}
                  >
                    {"Product"}
                  </div>
                  <Button2
                    className={classNames("__wab_instance", sty.button2__k9ILe)}
                    color={"clear"}
                    endIcon={
                      <svg
                        className={classNames(projectcss.all, sty.svg__obxiA)}
                        role={"img"}
                      />
                    }
                    size={"minimal"}
                    startIcon={
                      <svg
                        className={classNames(projectcss.all, sty.svg__pdmmW)}
                        role={"img"}
                      />
                    }
                    submitsForm={true}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___286Cp
                      )}
                    >
                      {"Pricing"}
                    </div>
                  </Button2>
                  <Button2
                    className={classNames("__wab_instance", sty.button2__l3Mux)}
                    color={"clear"}
                    endIcon={
                      <svg
                        className={classNames(projectcss.all, sty.svg__xzH)}
                        role={"img"}
                      />
                    }
                    size={"minimal"}
                    startIcon={
                      <svg
                        className={classNames(projectcss.all, sty.svg__xAqVq)}
                        role={"img"}
                      />
                    }
                    submitsForm={true}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___31Nqz
                      )}
                    >
                      {"Log in"}
                    </div>
                  </Button2>
                  <Button2
                    className={classNames(
                      "__wab_instance",
                      sty.button2___43FK7
                    )}
                    color={"clear"}
                    endIcon={
                      <svg
                        className={classNames(projectcss.all, sty.svg__v053Q)}
                        role={"img"}
                      />
                    }
                    size={"minimal"}
                    startIcon={
                      <svg
                        className={classNames(projectcss.all, sty.svg__hlqCd)}
                        role={"img"}
                      />
                    }
                    submitsForm={true}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__wVyxj
                      )}
                    >
                      {"Integrations"}
                    </div>
                  </Button2>
                  <Button2
                    className={classNames("__wab_instance", sty.button2__eRhYe)}
                    color={"clear"}
                    endIcon={
                      <svg
                        className={classNames(projectcss.all, sty.svg__uBsjj)}
                        role={"img"}
                      />
                    }
                    size={"minimal"}
                    startIcon={
                      <svg
                        className={classNames(projectcss.all, sty.svg__mCk4R)}
                        role={"img"}
                      />
                    }
                    submitsForm={true}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___8E9Ww
                      )}
                    >
                      {"Insights"}
                    </div>
                  </Button2>
                </Stack__>
              </div>
              <div className={classNames(projectcss.all, sty.column__wUx5M)}>
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__e3AU8)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__lPeZq
                    )}
                  >
                    {"Support"}
                  </div>
                  <Button2
                    className={classNames("__wab_instance", sty.button2__adNpl)}
                    color={"clear"}
                    endIcon={
                      <svg
                        className={classNames(projectcss.all, sty.svg__hvpYf)}
                        role={"img"}
                      />
                    }
                    size={"minimal"}
                    startIcon={
                      <svg
                        className={classNames(projectcss.all, sty.svg__qzmYw)}
                        role={"img"}
                      />
                    }
                    submitsForm={true}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__vnypo
                      )}
                    >
                      {"Documentation"}
                    </div>
                  </Button2>
                  <Button2
                    className={classNames("__wab_instance", sty.button2__cgM2R)}
                    color={"clear"}
                    endIcon={
                      <svg
                        className={classNames(projectcss.all, sty.svg__ii4Cs)}
                        role={"img"}
                      />
                    }
                    size={"minimal"}
                    startIcon={
                      <svg
                        className={classNames(projectcss.all, sty.svg___7LP45)}
                        role={"img"}
                      />
                    }
                    submitsForm={true}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__ouvTb
                      )}
                    >
                      {"FAQs"}
                    </div>
                  </Button2>
                  <Button2
                    className={classNames("__wab_instance", sty.button2__gO7Io)}
                    color={"clear"}
                    endIcon={
                      <svg
                        className={classNames(projectcss.all, sty.svg__oeysg)}
                        role={"img"}
                      />
                    }
                    size={"minimal"}
                    startIcon={
                      <svg
                        className={classNames(projectcss.all, sty.svg__ct30J)}
                        role={"img"}
                      />
                    }
                    submitsForm={true}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___0TtH3
                      )}
                    >
                      {"Status"}
                    </div>
                  </Button2>
                </Stack__>
              </div>
              <div className={classNames(projectcss.all, sty.column__nhsS1)}>
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__susR)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text___8GbrY
                    )}
                  >
                    {"Company"}
                  </div>
                  <Button2
                    className={classNames("__wab_instance", sty.button2__tkreS)}
                    color={"clear"}
                    endIcon={
                      <svg
                        className={classNames(projectcss.all, sty.svg__rw7Ti)}
                        role={"img"}
                      />
                    }
                    size={"minimal"}
                    startIcon={
                      <svg
                        className={classNames(projectcss.all, sty.svg__fdxBi)}
                        role={"img"}
                      />
                    }
                    submitsForm={true}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__r1A9S
                      )}
                    >
                      {"About"}
                    </div>
                  </Button2>
                  <Button2
                    className={classNames("__wab_instance", sty.button2__vi0Z)}
                    color={"clear"}
                    endIcon={
                      <svg
                        className={classNames(projectcss.all, sty.svg___7Lv0Y)}
                        role={"img"}
                      />
                    }
                    size={"minimal"}
                    startIcon={
                      <svg
                        className={classNames(projectcss.all, sty.svg__an4Ou)}
                        role={"img"}
                      />
                    }
                    submitsForm={true}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__tsXe
                      )}
                    >
                      {"Contact us"}
                    </div>
                  </Button2>
                  <Button2
                    className={classNames("__wab_instance", sty.button2___9QEw)}
                    color={"clear"}
                    endIcon={
                      <svg
                        className={classNames(projectcss.all, sty.svg__nF8BV)}
                        role={"img"}
                      />
                    }
                    size={"minimal"}
                    startIcon={
                      <svg
                        className={classNames(projectcss.all, sty.svg___1U3I)}
                        role={"img"}
                      />
                    }
                    submitsForm={true}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__ease
                      )}
                    >
                      {"Careers"}
                    </div>
                  </Button2>
                  <Button2
                    className={classNames("__wab_instance", sty.button2__nQ4D)}
                    color={"clear"}
                    endIcon={
                      <svg
                        className={classNames(projectcss.all, sty.svg__cr5A)}
                        role={"img"}
                      />
                    }
                    size={"minimal"}
                    startIcon={
                      <svg
                        className={classNames(projectcss.all, sty.svg__zSdyT)}
                        role={"img"}
                      />
                    }
                    submitsForm={true}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__vLqip
                      )}
                    >
                      {"Media"}
                    </div>
                  </Button2>
                </Stack__>
              </div>
            </Stack__>
          </div>
        </div>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  home: [
    "home",
    "sideEffect",
    "header",
    "btnFeatures",
    "btnCompany",
    "btnContact",
    "btnLogin",
    "button",
    "loginForm",
    "email",
    "password",
    "hero",
    "background2",
    "copy",
    "features",
    "foreground",
    "h2"
  ],

  sideEffect: ["sideEffect"],
  header: [
    "header",
    "btnFeatures",
    "btnCompany",
    "btnContact",
    "btnLogin",
    "button",
    "loginForm",
    "email",
    "password"
  ],

  btnFeatures: ["btnFeatures"],
  btnCompany: ["btnCompany"],
  btnContact: ["btnContact"],
  btnLogin: ["btnLogin"],
  button: ["button"],
  loginForm: ["loginForm", "email", "password"],
  email: ["email"],
  password: ["password"],
  hero: ["hero", "background2", "copy"],
  background2: ["background2"],
  copy: ["copy"],
  features: ["features", "foreground", "h2"],
  foreground: ["foreground", "h2"],
  h2: ["h2"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicHomePage__ArgProps,
          internalVariantPropNames: PlasmicHomePage__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicHomePage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "home") {
    func.displayName = "PlasmicHomePage";
  } else {
    func.displayName = `PlasmicHomePage.${nodeName}`;
  }
  return func;
}

export const PlasmicHomePage = Object.assign(
  // Top-level PlasmicHomePage renders the root element
  makeNodeComponent("home"),
  {
    // Helper components rendering sub-elements
    sideEffect: makeNodeComponent("sideEffect"),
    header: makeNodeComponent("header"),
    btnFeatures: makeNodeComponent("btnFeatures"),
    btnCompany: makeNodeComponent("btnCompany"),
    btnContact: makeNodeComponent("btnContact"),
    btnLogin: makeNodeComponent("btnLogin"),
    button: makeNodeComponent("button"),
    loginForm: makeNodeComponent("loginForm"),
    email: makeNodeComponent("email"),
    password: makeNodeComponent("password"),
    hero: makeNodeComponent("hero"),
    background2: makeNodeComponent("background2"),
    copy: makeNodeComponent("copy"),
    features: makeNodeComponent("features"),
    foreground: makeNodeComponent("foreground"),
    h2: makeNodeComponent("h2"),
    // Metadata about props expected for PlasmicHomePage
    internalVariantProps: PlasmicHomePage__VariantProps,
    internalArgProps: PlasmicHomePage__ArgProps,
    // Page metadata
    pageMetadata: {
      title: "Hello!",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicHomePage;
/* prettier-ignore-end */
