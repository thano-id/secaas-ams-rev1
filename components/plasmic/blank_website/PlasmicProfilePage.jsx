// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: qMKbWqzZjuHb1yLhCiN5Mq
// Component: ZKhv8Z-qhaXW
import * as React from "react";
import Head from "next/head";
import { useRouter } from "next/router";
import {
  Stack as Stack__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  initializeCodeComponentStates,
  initializePlasmicStates,
  useDollarState
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import MainPageLayout from "../../MainPageLayout"; // plasmic-import: bCVUuc7VYiYw/component
import Me from "../../Me"; // plasmic-import: M7n-Yi6ESK-n/component
import { FormWrapper } from "@plasmicpkgs/antd5/skinny/Form";
import { formHelpers as FormWrapper_Helpers } from "@plasmicpkgs/antd5/skinny/Form";
import Button2 from "../../Button2"; // plasmic-import: lci14Q3sXnn8/component
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: qMKbWqzZjuHb1yLhCiN5Mq/projectcss
import sty from "./PlasmicProfilePage.module.css"; // plasmic-import: ZKhv8Z-qhaXW/css
import GrammerlySvgrepoComSvgIcon from "./icons/PlasmicIcon__GrammerlySvgrepoComSvg"; // plasmic-import: uF5ee7wJSg2x/icon
import { getUser as __fn_user__getUser } from "../../../pages/utils_user"; // plasmic-import: user.getUser/customFunction

createPlasmicElementProxy;

export const PlasmicProfilePage__VariantProps = new Array();

export const PlasmicProfilePage__ArgProps = new Array();

const $$ = {
  user: {
    getUser: __fn_user__getUser
  }
};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicProfilePage__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "variable",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      },
      {
        path: "updateProfileForm.value",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        refName: "updateProfileForm",
        onMutate: generateOnMutateForSpec("value", FormWrapper_Helpers)
      },
      {
        path: "updateProfileForm.isSubmitting",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,
        refName: "updateProfileForm",
        onMutate: generateOnMutateForSpec("isSubmitting", FormWrapper_Helpers)
      },
      {
        path: "profileEmail.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $$.user.getUser().email;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "profileMsisdn.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $$.user.getUser().msisdn;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "profileFirstName.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $$.user.getUser().msisdn;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "profileLastName.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $$.user.getUser().msisdn;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "changePasswordForm.value",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,
        refName: "changePasswordForm",
        onMutate: generateOnMutateForSpec("value", FormWrapper_Helpers)
      },
      {
        path: "changePasswordForm.isSubmitting",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,
        refName: "changePasswordForm",
        onMutate: generateOnMutateForSpec("isSubmitting", FormWrapper_Helpers)
      },
      {
        path: "profileFirstName2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $$.user.getUser().msisdn;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      },
      {
        path: "profileLastName2.value",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) =>
          (() => {
            try {
              return $$.user.getUser().msisdn;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return undefined;
              }
              throw e;
            }
          })()
      }
    ],

    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });
  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
        <title key="title">{PlasmicProfilePage.pageMetadata.title}</title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicProfilePage.pageMetadata.title}
        />

        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicProfilePage.pageMetadata.title}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"profile"}
          data-plasmic-override={overrides.profile}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.profile
          )}
        >
          <MainPageLayout
            data-plasmic-name={"mainPageLayout"}
            data-plasmic-override={overrides.mainPageLayout}
            className={classNames("__wab_instance", sty.mainPageLayout)}
          >
            <h4
              data-plasmic-name={"title2"}
              data-plasmic-override={overrides.title2}
              className={classNames(
                projectcss.all,
                projectcss.h4,
                projectcss.__wab_text,
                sty.title2
              )}
            >
              {"My profile"}
            </h4>
            <dd
              data-plasmic-name={"description2"}
              data-plasmic-override={overrides.description2}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.description2
              )}
            >
              {"Update your profile by filling in the form below."}
            </dd>
            <div className={classNames(projectcss.all, sty.freeBox__chDet)}>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__klIu1)}
              >
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__pFcp9)}
                >
                  <Me
                    data-plasmic-name={"me"}
                    data-plasmic-override={overrides.me}
                    className={classNames("__wab_instance", sty.me)}
                    large={true}
                  />

                  {(() => {
                    const child$Props = {
                      className: classNames(
                        "__wab_instance",
                        sty.updateProfileForm
                      ),
                      extendedOnValuesChange:
                        generateStateOnChangePropForCodeComponents(
                          $state,
                          "value",
                          ["updateProfileForm", "value"],
                          FormWrapper_Helpers
                        ),
                      formItems: [
                        { label: "Name", name: "name", inputType: "Text" },
                        {
                          label: "Message",
                          name: "message",
                          inputType: "Text Area"
                        }
                      ],

                      labelCol: { span: 8, horizontalOnly: true },
                      layout: "vertical",
                      mode: "advanced",
                      onIsSubmittingChange:
                        generateStateOnChangePropForCodeComponents(
                          $state,
                          "isSubmitting",
                          ["updateProfileForm", "isSubmitting"],
                          FormWrapper_Helpers
                        ),
                      ref: ref => {
                        $refs["updateProfileForm"] = ref;
                      },
                      submitSlot: null,
                      wrapperCol: { span: 16, horizontalOnly: true }
                    };
                    initializeCodeComponentStates(
                      $state,
                      [
                        {
                          name: "value",
                          plasmicStateName: "updateProfileForm.value"
                        },
                        {
                          name: "isSubmitting",
                          plasmicStateName: "updateProfileForm.isSubmitting"
                        }
                      ],

                      [],
                      FormWrapper_Helpers ?? {},
                      child$Props
                    );
                    return (
                      <FormWrapper
                        data-plasmic-name={"updateProfileForm"}
                        data-plasmic-override={overrides.updateProfileForm}
                        {...child$Props}
                      >
                        <Stack__
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__mPJw
                          )}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__hXjQf
                            )}
                          >
                            <sub
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.sub__eXdWw
                              )}
                            >
                              {"Email address"}
                            </sub>
                            {(() => {
                              const child$Props = {
                                className: classNames(
                                  projectcss.all,
                                  projectcss.input,
                                  sty.profileEmail
                                ),
                                disabled: true,
                                onChange: e => {
                                  generateStateOnChangeProp($state, [
                                    "profileEmail",
                                    "value"
                                  ])(e.target.value);
                                },
                                placeholder: "Your registered email address",
                                ref: ref => {
                                  $refs["profileEmail"] = ref;
                                },
                                size: 1,
                                type: "email",
                                value:
                                  generateStateValueProp($state, [
                                    "profileEmail",
                                    "value"
                                  ]) ?? ""
                              };
                              initializePlasmicStates(
                                $state,
                                [
                                  {
                                    name: "profileEmail.value",
                                    initFunc: ({ $props, $state, $queries }) =>
                                      (() => {
                                        try {
                                          return $$.user.getUser().email;
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return undefined;
                                          }
                                          throw e;
                                        }
                                      })()
                                  }
                                ],

                                []
                              );
                              return (
                                <input
                                  data-plasmic-name={"profileEmail"}
                                  data-plasmic-override={overrides.profileEmail}
                                  {...child$Props}
                                />
                              );
                            })()}
                          </div>
                          <div
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__tirQi
                            )}
                          >
                            <sub
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.sub___9W4FO
                              )}
                            >
                              {"Phone number"}
                            </sub>
                            {(() => {
                              const child$Props = {
                                className: classNames(
                                  projectcss.all,
                                  projectcss.input,
                                  sty.profileMsisdn
                                ),
                                onChange: e => {
                                  generateStateOnChangeProp($state, [
                                    "profileMsisdn",
                                    "value"
                                  ])(e.target.value);
                                },
                                placeholder: "Your active phone number",
                                ref: ref => {
                                  $refs["profileMsisdn"] = ref;
                                },
                                size: 1,
                                type: "email",
                                value:
                                  generateStateValueProp($state, [
                                    "profileMsisdn",
                                    "value"
                                  ]) ?? ""
                              };
                              initializePlasmicStates(
                                $state,
                                [
                                  {
                                    name: "profileMsisdn.value",
                                    initFunc: ({ $props, $state, $queries }) =>
                                      (() => {
                                        try {
                                          return $$.user.getUser().msisdn;
                                        } catch (e) {
                                          if (
                                            e instanceof TypeError ||
                                            e?.plasmicType ===
                                              "PlasmicUndefinedDataError"
                                          ) {
                                            return undefined;
                                          }
                                          throw e;
                                        }
                                      })()
                                  }
                                ],

                                []
                              );
                              return (
                                <input
                                  data-plasmic-name={"profileMsisdn"}
                                  data-plasmic-override={
                                    overrides.profileMsisdn
                                  }
                                  {...child$Props}
                                />
                              );
                            })()}
                          </div>
                          <Stack__
                            as={"div"}
                            hasGap={true}
                            className={classNames(
                              projectcss.all,
                              sty.freeBox__xZ3YZ
                            )}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__gNnH8
                              )}
                            >
                              <sub
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.sub__zNfur
                                )}
                              >
                                {"First name"}
                              </sub>
                              {(() => {
                                const child$Props = {
                                  className: classNames(
                                    projectcss.all,
                                    projectcss.input,
                                    sty.profileFirstName
                                  ),
                                  onChange: e => {
                                    generateStateOnChangeProp($state, [
                                      "profileFirstName",
                                      "value"
                                    ])(e.target.value);
                                  },
                                  placeholder: "First name",
                                  ref: ref => {
                                    $refs["profileFirstName"] = ref;
                                  },
                                  size: 1,
                                  type: "email",
                                  value:
                                    generateStateValueProp($state, [
                                      "profileFirstName",
                                      "value"
                                    ]) ?? ""
                                };
                                initializePlasmicStates(
                                  $state,
                                  [
                                    {
                                      name: "profileFirstName.value",
                                      initFunc: ({
                                        $props,
                                        $state,
                                        $queries
                                      }) =>
                                        (() => {
                                          try {
                                            return $$.user.getUser().msisdn;
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return undefined;
                                            }
                                            throw e;
                                          }
                                        })()
                                    }
                                  ],

                                  []
                                );
                                return (
                                  <input
                                    data-plasmic-name={"profileFirstName"}
                                    data-plasmic-override={
                                      overrides.profileFirstName
                                    }
                                    {...child$Props}
                                  />
                                );
                              })()}
                            </div>
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__spyfJ
                              )}
                            >
                              <sub
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.sub__nAgRm
                                )}
                              >
                                {"Last name"}
                              </sub>
                              {(() => {
                                const child$Props = {
                                  className: classNames(
                                    projectcss.all,
                                    projectcss.input,
                                    sty.profileLastName
                                  ),
                                  onChange: e => {
                                    generateStateOnChangeProp($state, [
                                      "profileLastName",
                                      "value"
                                    ])(e.target.value);
                                  },
                                  placeholder: "Last name",
                                  ref: ref => {
                                    $refs["profileLastName"] = ref;
                                  },
                                  size: 1,
                                  type: "email",
                                  value:
                                    generateStateValueProp($state, [
                                      "profileLastName",
                                      "value"
                                    ]) ?? ""
                                };
                                initializePlasmicStates(
                                  $state,
                                  [
                                    {
                                      name: "profileLastName.value",
                                      initFunc: ({
                                        $props,
                                        $state,
                                        $queries
                                      }) =>
                                        (() => {
                                          try {
                                            return $$.user.getUser().msisdn;
                                          } catch (e) {
                                            if (
                                              e instanceof TypeError ||
                                              e?.plasmicType ===
                                                "PlasmicUndefinedDataError"
                                            ) {
                                              return undefined;
                                            }
                                            throw e;
                                          }
                                        })()
                                    }
                                  ],

                                  []
                                );
                                return (
                                  <input
                                    data-plasmic-name={"profileLastName"}
                                    data-plasmic-override={
                                      overrides.profileLastName
                                    }
                                    {...child$Props}
                                  />
                                );
                              })()}
                            </div>
                          </Stack__>
                        </Stack__>
                        <Stack__
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox___5LJf7
                          )}
                        >
                          <Button2
                            className={classNames(
                              "__wab_instance",
                              sty.button2__t5AR
                            )}
                            endIcon={
                              <svg
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__cZumU
                                )}
                                role={"img"}
                              />
                            }
                            startIcon={
                              <svg
                                className={classNames(
                                  projectcss.all,
                                  sty.svg___37P9C
                                )}
                                role={"img"}
                              />
                            }
                            submitsForm={true}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text___8A38
                              )}
                            >
                              {"Update profile"}
                            </div>
                          </Button2>
                          <Button2
                            className={classNames(
                              "__wab_instance",
                              sty.button2___87R4X
                            )}
                            color={"link"}
                            endIcon={
                              <svg
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__oR4Ut
                                )}
                                role={"img"}
                              />
                            }
                            onClick={async event => {
                              const $steps = {};
                              $steps["goToLogoutPage"] = true
                                ? (() => {
                                    const actionArgs = {
                                      destination: `/user/logout`
                                    };
                                    return (({ destination }) => {
                                      if (
                                        typeof destination === "string" &&
                                        destination.startsWith("#")
                                      ) {
                                        document
                                          .getElementById(destination.substr(1))
                                          .scrollIntoView({
                                            behavior: "smooth"
                                          });
                                      } else {
                                        __nextRouter?.push(destination);
                                      }
                                    })?.apply(null, [actionArgs]);
                                  })()
                                : undefined;
                              if (
                                $steps["goToLogoutPage"] != null &&
                                typeof $steps["goToLogoutPage"] === "object" &&
                                typeof $steps["goToLogoutPage"].then ===
                                  "function"
                              ) {
                                $steps["goToLogoutPage"] = await $steps[
                                  "goToLogoutPage"
                                ];
                              }
                            }}
                            startIcon={
                              <svg
                                className={classNames(
                                  projectcss.all,
                                  sty.svg___15A4X
                                )}
                                role={"img"}
                              />
                            }
                            submitsForm={false}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                projectcss.__wab_text,
                                sty.text__aIAv
                              )}
                            >
                              {"Sign out"}
                            </div>
                          </Button2>
                        </Stack__>
                      </FormWrapper>
                    );
                  })()}
                </Stack__>
              </Stack__>
              <div className={classNames(projectcss.all, sty.freeBox__iNKkZ)} />
              <div className={classNames(projectcss.all, sty.freeBox__s5W5Q)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__b26
                  )}
                >
                  <React.Fragment>
                    <React.Fragment>
                      {"To sign in, you need to have an active "}
                    </React.Fragment>
                    <span
                      className={"plasmic_default__all plasmic_default__span"}
                      style={{ fontWeight: 700 }}
                    >
                      {"SECaaS"}
                    </span>
                    <React.Fragment>
                      {
                        " account. \n\nDon't have an account yet? Contact us at secaas@thano.id or click here and fill out a simple form. We'll contact you right away. "
                      }
                    </React.Fragment>
                  </React.Fragment>
                </div>
              </div>
            </div>
            <div className={classNames(projectcss.all, sty.freeBox___0Vb8D)}>
              <Stack__
                as={"div"}
                hasGap={true}
                className={classNames(projectcss.all, sty.freeBox__oQEwi)}
              >
                <Stack__
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox___37KAj)}
                >
                  {(() => {
                    const child$Props = {
                      className: classNames(
                        "__wab_instance",
                        sty.changePasswordForm
                      ),
                      extendedOnValuesChange:
                        generateStateOnChangePropForCodeComponents(
                          $state,
                          "value",
                          ["changePasswordForm", "value"],
                          FormWrapper_Helpers
                        ),
                      formItems: [
                        { label: "Name", name: "name", inputType: "Text" },
                        {
                          label: "Message",
                          name: "message",
                          inputType: "Text Area"
                        }
                      ],

                      labelCol: { span: 8, horizontalOnly: true },
                      layout: "vertical",
                      mode: "advanced",
                      onIsSubmittingChange:
                        generateStateOnChangePropForCodeComponents(
                          $state,
                          "isSubmitting",
                          ["changePasswordForm", "isSubmitting"],
                          FormWrapper_Helpers
                        ),
                      ref: ref => {
                        $refs["changePasswordForm"] = ref;
                      },
                      submitSlot: null,
                      wrapperCol: { span: 16, horizontalOnly: true }
                    };
                    initializeCodeComponentStates(
                      $state,
                      [
                        {
                          name: "value",
                          plasmicStateName: "changePasswordForm.value"
                        },
                        {
                          name: "isSubmitting",
                          plasmicStateName: "changePasswordForm.isSubmitting"
                        }
                      ],

                      [],
                      FormWrapper_Helpers ?? {},
                      child$Props
                    );
                    return (
                      <FormWrapper
                        data-plasmic-name={"changePasswordForm"}
                        data-plasmic-override={overrides.changePasswordForm}
                        {...child$Props}
                      >
                        <Stack__
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__keUtp
                          )}
                        >
                          <Stack__
                            as={"div"}
                            data-plasmic-name={"columns"}
                            data-plasmic-override={overrides.columns}
                            hasGap={true}
                            className={classNames(projectcss.all, sty.columns)}
                          >
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.column___4Gpl7
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__bz3Zh
                                )}
                              >
                                <sub
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.sub__shdY
                                  )}
                                >
                                  {"New password"}
                                </sub>
                                {(() => {
                                  const child$Props = {
                                    className: classNames(
                                      projectcss.all,
                                      projectcss.input,
                                      sty.profileFirstName2
                                    ),
                                    onChange: e => {
                                      generateStateOnChangeProp($state, [
                                        "profileFirstName2",
                                        "value"
                                      ])(e.target.value);
                                    },
                                    placeholder: "Enter your new password",
                                    ref: ref => {
                                      $refs["profileFirstName2"] = ref;
                                    },
                                    size: 1,
                                    type: "email",
                                    value:
                                      generateStateValueProp($state, [
                                        "profileFirstName2",
                                        "value"
                                      ]) ?? ""
                                  };
                                  initializePlasmicStates(
                                    $state,
                                    [
                                      {
                                        name: "profileFirstName2.value",
                                        initFunc: ({
                                          $props,
                                          $state,
                                          $queries
                                        }) =>
                                          (() => {
                                            try {
                                              return $$.user.getUser().msisdn;
                                            } catch (e) {
                                              if (
                                                e instanceof TypeError ||
                                                e?.plasmicType ===
                                                  "PlasmicUndefinedDataError"
                                              ) {
                                                return undefined;
                                              }
                                              throw e;
                                            }
                                          })()
                                      }
                                    ],

                                    []
                                  );
                                  return (
                                    <input
                                      data-plasmic-name={"profileFirstName2"}
                                      data-plasmic-override={
                                        overrides.profileFirstName2
                                      }
                                      {...child$Props}
                                    />
                                  );
                                })()}
                              </div>
                            </div>
                            <div
                              className={classNames(
                                projectcss.all,
                                sty.column__ceQeS
                              )}
                            >
                              <div
                                className={classNames(
                                  projectcss.all,
                                  sty.freeBox__eSj4
                                )}
                              >
                                <sub
                                  className={classNames(
                                    projectcss.all,
                                    projectcss.__wab_text,
                                    sty.sub__xscsX
                                  )}
                                >
                                  {"Confirm password"}
                                </sub>
                                {(() => {
                                  const child$Props = {
                                    className: classNames(
                                      projectcss.all,
                                      projectcss.input,
                                      sty.profileLastName2
                                    ),
                                    onChange: e => {
                                      generateStateOnChangeProp($state, [
                                        "profileLastName2",
                                        "value"
                                      ])(e.target.value);
                                    },
                                    placeholder: "Confirm the new password",
                                    ref: ref => {
                                      $refs["profileLastName2"] = ref;
                                    },
                                    size: 1,
                                    type: "email",
                                    value:
                                      generateStateValueProp($state, [
                                        "profileLastName2",
                                        "value"
                                      ]) ?? ""
                                  };
                                  initializePlasmicStates(
                                    $state,
                                    [
                                      {
                                        name: "profileLastName2.value",
                                        initFunc: ({
                                          $props,
                                          $state,
                                          $queries
                                        }) =>
                                          (() => {
                                            try {
                                              return $$.user.getUser().msisdn;
                                            } catch (e) {
                                              if (
                                                e instanceof TypeError ||
                                                e?.plasmicType ===
                                                  "PlasmicUndefinedDataError"
                                              ) {
                                                return undefined;
                                              }
                                              throw e;
                                            }
                                          })()
                                      }
                                    ],

                                    []
                                  );
                                  return (
                                    <input
                                      data-plasmic-name={"profileLastName2"}
                                      data-plasmic-override={
                                        overrides.profileLastName2
                                      }
                                      {...child$Props}
                                    />
                                  );
                                })()}
                              </div>
                            </div>
                          </Stack__>
                        </Stack__>
                        <Stack__
                          as={"div"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__q2VvT
                          )}
                        >
                          <Button2
                            className={classNames(
                              "__wab_instance",
                              sty.button2__rqZ62
                            )}
                            color={"red"}
                            endIcon={
                              <svg
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__b2UCv
                                )}
                                role={"img"}
                              />
                            }
                            startIcon={
                              <svg
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__f45Y4
                                )}
                                role={"img"}
                              />
                            }
                            submitsForm={true}
                          >
                            <Stack__
                              as={"div"}
                              hasGap={true}
                              className={classNames(
                                projectcss.all,
                                sty.freeBox__vs36C
                              )}
                            >
                              <GrammerlySvgrepoComSvgIcon
                                className={classNames(
                                  projectcss.all,
                                  sty.svg__mQoYg
                                )}
                                role={"img"}
                              />

                              <div
                                className={classNames(
                                  projectcss.all,
                                  projectcss.__wab_text,
                                  sty.text___4P6Gq
                                )}
                              >
                                {"Change password"}
                              </div>
                            </Stack__>
                          </Button2>
                        </Stack__>
                      </FormWrapper>
                    );
                  })()}
                </Stack__>
              </Stack__>
              <div className={classNames(projectcss.all, sty.freeBox__xwS4B)} />
              <div className={classNames(projectcss.all, sty.freeBox__ju3V)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text__ig0Xp
                  )}
                >
                  {
                    "Keep this new password at hand. You will need it the next time you sign in."
                  }
                </div>
              </div>
            </div>
          </MainPageLayout>
        </div>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  profile: [
    "profile",
    "mainPageLayout",
    "title2",
    "description2",
    "me",
    "updateProfileForm",
    "profileEmail",
    "profileMsisdn",
    "profileFirstName",
    "profileLastName",
    "changePasswordForm",
    "columns",
    "profileFirstName2",
    "profileLastName2"
  ],

  mainPageLayout: [
    "mainPageLayout",
    "title2",
    "description2",
    "me",
    "updateProfileForm",
    "profileEmail",
    "profileMsisdn",
    "profileFirstName",
    "profileLastName",
    "changePasswordForm",
    "columns",
    "profileFirstName2",
    "profileLastName2"
  ],

  title2: ["title2"],
  description2: ["description2"],
  me: ["me"],
  updateProfileForm: [
    "updateProfileForm",
    "profileEmail",
    "profileMsisdn",
    "profileFirstName",
    "profileLastName"
  ],

  profileEmail: ["profileEmail"],
  profileMsisdn: ["profileMsisdn"],
  profileFirstName: ["profileFirstName"],
  profileLastName: ["profileLastName"],
  changePasswordForm: [
    "changePasswordForm",
    "columns",
    "profileFirstName2",
    "profileLastName2"
  ],

  columns: ["columns", "profileFirstName2", "profileLastName2"],
  profileFirstName2: ["profileFirstName2"],
  profileLastName2: ["profileLastName2"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicProfilePage__ArgProps,
          internalVariantPropNames: PlasmicProfilePage__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicProfilePage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "profile") {
    func.displayName = "PlasmicProfilePage";
  } else {
    func.displayName = `PlasmicProfilePage.${nodeName}`;
  }
  return func;
}

export const PlasmicProfilePage = Object.assign(
  // Top-level PlasmicProfilePage renders the root element
  makeNodeComponent("profile"),
  {
    // Helper components rendering sub-elements
    mainPageLayout: makeNodeComponent("mainPageLayout"),
    title2: makeNodeComponent("title2"),
    description2: makeNodeComponent("description2"),
    me: makeNodeComponent("me"),
    updateProfileForm: makeNodeComponent("updateProfileForm"),
    profileEmail: makeNodeComponent("profileEmail"),
    profileMsisdn: makeNodeComponent("profileMsisdn"),
    profileFirstName: makeNodeComponent("profileFirstName"),
    profileLastName: makeNodeComponent("profileLastName"),
    changePasswordForm: makeNodeComponent("changePasswordForm"),
    columns: makeNodeComponent("columns"),
    profileFirstName2: makeNodeComponent("profileFirstName2"),
    profileLastName2: makeNodeComponent("profileLastName2"),
    // Metadata about props expected for PlasmicProfilePage
    internalVariantProps: PlasmicProfilePage__VariantProps,
    internalArgProps: PlasmicProfilePage__ArgProps,
    // Page metadata
    pageMetadata: {
      title: "My profile",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicProfilePage;
/* prettier-ignore-end */
