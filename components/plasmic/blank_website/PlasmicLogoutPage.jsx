// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: qMKbWqzZjuHb1yLhCiN5Mq
// Component: se9g0ZvWgDOt
import * as React from "react";
import Head from "next/head";
import { useRouter } from "next/router";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  useDollarState
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import { SideEffect } from "@plasmicpkgs/plasmic-basic-components";
import MainPageLayout from "../../MainPageLayout"; // plasmic-import: bCVUuc7VYiYw/component
import Me from "../../Me"; // plasmic-import: M7n-Yi6ESK-n/component
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: qMKbWqzZjuHb1yLhCiN5Mq/projectcss
import sty from "./PlasmicLogoutPage.module.css"; // plasmic-import: se9g0ZvWgDOt/css
import { loggedOut as __fn_user__loggedOut } from "../../../pages/utils_user"; // plasmic-import: user.loggedOut/customFunction

createPlasmicElementProxy;

export const PlasmicLogoutPage__VariantProps = new Array();

export const PlasmicLogoutPage__ArgProps = new Array();

const $$ = {
  user: {
    loggedOut: __fn_user__loggedOut
  }
};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicLogoutPage__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "variable",
        type: "private",
        variableType: "text",
        initFunc: ({ $props, $state, $queries, $ctx }) => ""
      }
    ],

    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });
  return (
    <React.Fragment>
      <Head>
        <meta name="twitter:card" content="summary" />
        <title key="title">{PlasmicLogoutPage.pageMetadata.title}</title>
        <meta
          key="og:title"
          property="og:title"
          content={PlasmicLogoutPage.pageMetadata.title}
        />

        <meta
          key="twitter:title"
          name="twitter:title"
          content={PlasmicLogoutPage.pageMetadata.title}
        />
      </Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"profile"}
          data-plasmic-override={overrides.profile}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.profile
          )}
        >
          <SideEffect
            data-plasmic-name={"sideEffect"}
            data-plasmic-override={overrides.sideEffect}
            className={classNames("__wab_instance", sty.sideEffect)}
            onMount={async () => {
              const $steps = {};
              $steps["runCode"] = true
                ? (() => {
                    const actionArgs = {
                      customFunction: async () => {
                        return $$.user.loggedOut();
                      }
                    };
                    return (({ customFunction }) => {
                      return customFunction();
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["runCode"] != null &&
                typeof $steps["runCode"] === "object" &&
                typeof $steps["runCode"].then === "function"
              ) {
                $steps["runCode"] = await $steps["runCode"];
              }
              $steps["goToHomePage"] = true
                ? (() => {
                    const actionArgs = { destination: `/` };
                    return (({ destination }) => {
                      if (
                        typeof destination === "string" &&
                        destination.startsWith("#")
                      ) {
                        document
                          .getElementById(destination.substr(1))
                          .scrollIntoView({ behavior: "smooth" });
                      } else {
                        __nextRouter?.push(destination);
                      }
                    })?.apply(null, [actionArgs]);
                  })()
                : undefined;
              if (
                $steps["goToHomePage"] != null &&
                typeof $steps["goToHomePage"] === "object" &&
                typeof $steps["goToHomePage"].then === "function"
              ) {
                $steps["goToHomePage"] = await $steps["goToHomePage"];
              }
            }}
          />

          <MainPageLayout
            data-plasmic-name={"mainPageLayout"}
            data-plasmic-override={overrides.mainPageLayout}
            className={classNames("__wab_instance", sty.mainPageLayout)}
          >
            <h4
              data-plasmic-name={"title2"}
              data-plasmic-override={overrides.title2}
              className={classNames(
                projectcss.all,
                projectcss.h4,
                projectcss.__wab_text,
                sty.title2
              )}
            >
              {"Signing out.."}
            </h4>
            <dd
              data-plasmic-name={"description2"}
              data-plasmic-override={overrides.description2}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.description2
              )}
            >
              {"You can update your profile below."}
            </dd>
            <div
              data-plasmic-name={"freeBox"}
              data-plasmic-override={overrides.freeBox}
              className={classNames(projectcss.all, sty.freeBox)}
            >
              <Me
                data-plasmic-name={"me"}
                data-plasmic-override={overrides.me}
                className={classNames("__wab_instance", sty.me)}
              />
            </div>
          </MainPageLayout>
        </div>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  profile: [
    "profile",
    "sideEffect",
    "mainPageLayout",
    "title2",
    "description2",
    "freeBox",
    "me"
  ],

  sideEffect: ["sideEffect"],
  mainPageLayout: ["mainPageLayout", "title2", "description2", "freeBox", "me"],
  title2: ["title2"],
  description2: ["description2"],
  freeBox: ["freeBox", "me"],
  me: ["me"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicLogoutPage__ArgProps,
          internalVariantPropNames: PlasmicLogoutPage__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicLogoutPage__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "profile") {
    func.displayName = "PlasmicLogoutPage";
  } else {
    func.displayName = `PlasmicLogoutPage.${nodeName}`;
  }
  return func;
}

export const PlasmicLogoutPage = Object.assign(
  // Top-level PlasmicLogoutPage renders the root element
  makeNodeComponent("profile"),
  {
    // Helper components rendering sub-elements
    sideEffect: makeNodeComponent("sideEffect"),
    mainPageLayout: makeNodeComponent("mainPageLayout"),
    title2: makeNodeComponent("title2"),
    description2: makeNodeComponent("description2"),
    freeBox: makeNodeComponent("freeBox"),
    me: makeNodeComponent("me"),
    // Metadata about props expected for PlasmicLogoutPage
    internalVariantProps: PlasmicLogoutPage__VariantProps,
    internalArgProps: PlasmicLogoutPage__ArgProps,
    // Page metadata
    pageMetadata: {
      title: "Signing out..",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicLogoutPage;
/* prettier-ignore-end */
