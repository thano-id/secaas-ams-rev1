// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: qMKbWqzZjuHb1yLhCiN5Mq
// Component: fvhUR2yOqw0U
import * as React from "react";
import { useRouter } from "next/router";
import {
  Stack as Stack__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  renderPlasmicSlot
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: qMKbWqzZjuHb1yLhCiN5Mq/projectcss
import sty from "./PlasmicSideMenuItem.module.css"; // plasmic-import: fvhUR2yOqw0U/css

createPlasmicElementProxy;

export const PlasmicSideMenuItem__VariantProps = new Array();

export const PlasmicSideMenuItem__ArgProps = new Array(
  "title",
  "subtitle",
  "children",
  "isMenuItemIconVisible"
);

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicSideMenuItem__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {
          isMenuItemIconVisible: true
        },
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  return (
    <Stack__
      as={"div"}
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.root
      )}
    >
      <div className={classNames(projectcss.all, sty.freeBox__h7Fa6)}>
        {(() => {
          try {
            return $props.isMenuItemIconVisible;
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return true;
            }
            throw e;
          }
        })()
          ? renderPlasmicSlot({
              defaultContents: (
                <svg
                  className={classNames(projectcss.all, sty.svg___8VMtD)}
                  role={"img"}
                />
              ),

              value: args.children
            })
          : null}
      </div>
      {(() => {
        try {
          return $props.title;
        } catch (e) {
          if (
            e instanceof TypeError ||
            e?.plasmicType === "PlasmicUndefinedDataError"
          ) {
            return true;
          }
          throw e;
        }
      })() ? (
        <div className={classNames(projectcss.all, sty.freeBox__iwziz)}>
          {(() => {
            try {
              return $props.title;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return true;
              }
              throw e;
            }
          })() ? (
            <nav
              data-plasmic-name={"menuItemTitle"}
              data-plasmic-override={overrides.menuItemTitle}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.menuItemTitle
              )}
            >
              <React.Fragment>
                {(() => {
                  try {
                    return $props.title;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "Dashboard";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            </nav>
          ) : null}
          {(() => {
            try {
              return $props.subtitle;
            } catch (e) {
              if (
                e instanceof TypeError ||
                e?.plasmicType === "PlasmicUndefinedDataError"
              ) {
                return false;
              }
              throw e;
            }
          })() ? (
            <sub
              data-plasmic-name={"menuItemDescription"}
              data-plasmic-override={overrides.menuItemDescription}
              className={classNames(
                projectcss.all,
                projectcss.__wab_text,
                sty.menuItemDescription
              )}
            >
              <React.Fragment>
                {(() => {
                  try {
                    return $props.subtitle;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return "Dashboard";
                    }
                    throw e;
                  }
                })()}
              </React.Fragment>
            </sub>
          ) : null}
        </div>
      ) : null}
    </Stack__>
  );
}

const PlasmicDescendants = {
  root: ["root", "menuItemTitle", "menuItemDescription"],
  menuItemTitle: ["menuItemTitle"],
  menuItemDescription: ["menuItemDescription"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicSideMenuItem__ArgProps,
          internalVariantPropNames: PlasmicSideMenuItem__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicSideMenuItem__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSideMenuItem";
  } else {
    func.displayName = `PlasmicSideMenuItem.${nodeName}`;
  }
  return func;
}

export const PlasmicSideMenuItem = Object.assign(
  // Top-level PlasmicSideMenuItem renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    menuItemTitle: makeNodeComponent("menuItemTitle"),
    menuItemDescription: makeNodeComponent("menuItemDescription"),
    // Metadata about props expected for PlasmicSideMenuItem
    internalVariantProps: PlasmicSideMenuItem__VariantProps,
    internalArgProps: PlasmicSideMenuItem__ArgProps
  }
);

export default PlasmicSideMenuItem;
/* prettier-ignore-end */
