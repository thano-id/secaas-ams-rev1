// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: qMKbWqzZjuHb1yLhCiN5Mq
// Component: xOE4M5xEAcvA
import * as React from "react";
import { useRouter } from "next/router";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import SideMenuSectionHead from "../../SideMenuSectionHead"; // plasmic-import: lRSRG8YACsJd/component
import SideMenuItem from "../../SideMenuItem"; // plasmic-import: fvhUR2yOqw0U/component
import { useScreenVariants as useScreenVariants_9QPfl0YfbSni } from "./PlasmicGlobalVariant__Mobile"; // plasmic-import: 9qPFL0yfbSNI/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: qMKbWqzZjuHb1yLhCiN5Mq/projectcss
import sty from "./PlasmicSettingsSheet.module.css"; // plasmic-import: xOE4M5xEAcvA/css
import BuildingsSvgrepoComSvg2Icon from "./icons/PlasmicIcon__BuildingsSvgrepoComSvg2"; // plasmic-import: YnW0xt9auy5O/icon
import BuildingSvgrepoComSvgIcon from "./icons/PlasmicIcon__BuildingSvgrepoComSvg"; // plasmic-import: 8sTcdDxLmqNz/icon
import Archive2SvgrepoComSvgIcon from "./icons/PlasmicIcon__Archive2SvgrepoComSvg"; // plasmic-import: GmE4DgTrkmB4/icon
import GrammerlySvgrepoComSvgIcon from "./icons/PlasmicIcon__GrammerlySvgrepoComSvg"; // plasmic-import: uF5ee7wJSg2x/icon

createPlasmicElementProxy;

export const PlasmicSettingsSheet__VariantProps = new Array();

export const PlasmicSettingsSheet__ArgProps = new Array();

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicSettingsSheet__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const globalVariants = ensureGlobalVariants({
    mobile: useScreenVariants_9QPfl0YfbSni()
  });
  return (
    <div
      data-plasmic-name={"settingsSheet"}
      data-plasmic-override={overrides.settingsSheet}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.settingsSheet
      )}
    >
      <div className={classNames(projectcss.all, sty.freeBox__f7Xou)}>
        <div
          className={classNames(projectcss.all, sty.freeBox__nzBvn)}
          onClick={async event => {
            const $steps = {};
          }}
        >
          <div className={classNames(projectcss.all, sty.freeBox__apphv)} />
        </div>
        <SideMenuSectionHead
          data-plasmic-name={"sideMenuSectionHead"}
          data-plasmic-override={overrides.sideMenuSectionHead}
          className={classNames("__wab_instance", sty.sideMenuSectionHead)}
          title={"Settings & Parameters"}
        />

        <div
          className={classNames(projectcss.all, sty.freeBox___2Onju)}
          onClick={async event => {
            const $steps = {};
            $steps["goToPropertiesPage"] = true
              ? (() => {
                  const actionArgs = { destination: `/user/properties` };
                  return (({ destination }) => {
                    if (
                      typeof destination === "string" &&
                      destination.startsWith("#")
                    ) {
                      document
                        .getElementById(destination.substr(1))
                        .scrollIntoView({ behavior: "smooth" });
                    } else {
                      __nextRouter?.push(destination);
                    }
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["goToPropertiesPage"] != null &&
              typeof $steps["goToPropertiesPage"] === "object" &&
              typeof $steps["goToPropertiesPage"].then === "function"
            ) {
              $steps["goToPropertiesPage"] = await $steps["goToPropertiesPage"];
            }
          }}
        >
          <SideMenuItem
            className={classNames("__wab_instance", sty.sideMenuItem___4F2Ym)}
            subtitle={``}
            title={"Properties"}
          >
            <BuildingsSvgrepoComSvg2Icon
              className={classNames(projectcss.all, sty.svg__xct8F)}
              role={"img"}
            />
          </SideMenuItem>
        </div>
        <div
          className={classNames(projectcss.all, sty.freeBox__xDgt5)}
          onClick={async event => {
            const $steps = {};
            $steps["goToTenantsPage"] = true
              ? (() => {
                  const actionArgs = { destination: `/user/tenants` };
                  return (({ destination }) => {
                    if (
                      typeof destination === "string" &&
                      destination.startsWith("#")
                    ) {
                      document
                        .getElementById(destination.substr(1))
                        .scrollIntoView({ behavior: "smooth" });
                    } else {
                      __nextRouter?.push(destination);
                    }
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["goToTenantsPage"] != null &&
              typeof $steps["goToTenantsPage"] === "object" &&
              typeof $steps["goToTenantsPage"].then === "function"
            ) {
              $steps["goToTenantsPage"] = await $steps["goToTenantsPage"];
            }
          }}
        >
          <SideMenuItem
            className={classNames("__wab_instance", sty.sideMenuItem__tp3I)}
            subtitle={``}
            title={"Tenants"}
          >
            <BuildingSvgrepoComSvgIcon
              className={classNames(projectcss.all, sty.svg__ek2C)}
              role={"img"}
            />
          </SideMenuItem>
        </div>
        <div className={classNames(projectcss.all, sty.freeBox__gyYv9)}>
          <SideMenuItem
            className={classNames("__wab_instance", sty.sideMenuItem___3N7Do)}
            subtitle={``}
            title={"Master data"}
          >
            <Archive2SvgrepoComSvgIcon
              className={classNames(projectcss.all, sty.svg__rhN3Q)}
              role={"img"}
            />
          </SideMenuItem>
        </div>
        <div className={classNames(projectcss.all, sty.freeBox__bcced)} />
        <div
          className={classNames(projectcss.all, sty.freeBox__y6T3)}
          onClick={async event => {
            const $steps = {};
            $steps["goToProfilePage"] = true
              ? (() => {
                  const actionArgs = { destination: `/user/profile` };
                  return (({ destination }) => {
                    if (
                      typeof destination === "string" &&
                      destination.startsWith("#")
                    ) {
                      document
                        .getElementById(destination.substr(1))
                        .scrollIntoView({ behavior: "smooth" });
                    } else {
                      __nextRouter?.push(destination);
                    }
                  })?.apply(null, [actionArgs]);
                })()
              : undefined;
            if (
              $steps["goToProfilePage"] != null &&
              typeof $steps["goToProfilePage"] === "object" &&
              typeof $steps["goToProfilePage"].then === "function"
            ) {
              $steps["goToProfilePage"] = await $steps["goToProfilePage"];
            }
          }}
        >
          <SideMenuItem
            className={classNames("__wab_instance", sty.sideMenuItem__wvUhh)}
            subtitle={``}
            title={"My profile"}
          >
            <GrammerlySvgrepoComSvgIcon
              className={classNames(projectcss.all, sty.svg___6O3Ee)}
              role={"img"}
            />
          </SideMenuItem>
        </div>
      </div>
    </div>
  );
}

const PlasmicDescendants = {
  settingsSheet: ["settingsSheet", "sideMenuSectionHead"],
  sideMenuSectionHead: ["sideMenuSectionHead"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicSettingsSheet__ArgProps,
          internalVariantPropNames: PlasmicSettingsSheet__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicSettingsSheet__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "settingsSheet") {
    func.displayName = "PlasmicSettingsSheet";
  } else {
    func.displayName = `PlasmicSettingsSheet.${nodeName}`;
  }
  return func;
}

export const PlasmicSettingsSheet = Object.assign(
  // Top-level PlasmicSettingsSheet renders the root element
  makeNodeComponent("settingsSheet"),
  {
    // Helper components rendering sub-elements
    sideMenuSectionHead: makeNodeComponent("sideMenuSectionHead"),
    // Metadata about props expected for PlasmicSettingsSheet
    internalVariantProps: PlasmicSettingsSheet__VariantProps,
    internalArgProps: PlasmicSettingsSheet__ArgProps
  }
);

export default PlasmicSettingsSheet;
/* prettier-ignore-end */
