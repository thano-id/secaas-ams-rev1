// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: qMKbWqzZjuHb1yLhCiN5Mq
// Component: M7n-Yi6ESK-n
import * as React from "react";
import { useRouter } from "next/router";
import {
  PlasmicImg as PlasmicImg__,
  Stack as Stack__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  hasVariant,
  useDollarState
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: qMKbWqzZjuHb1yLhCiN5Mq/projectcss
import sty from "./PlasmicMe.module.css"; // plasmic-import: M7n-Yi6ESK-n/css
import { getUser as __fn_user__getUser } from "../../../pages/utils_user"; // plasmic-import: user.getUser/customFunction

createPlasmicElementProxy;

export const PlasmicMe__VariantProps = new Array("large");

export const PlasmicMe__ArgProps = new Array();

const $$ = {
  user: {
    getUser: __fn_user__getUser
  }
};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicMe__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "large",
        type: "private",
        variableType: "variant",
        initFunc: ({ $props, $state, $queries, $ctx }) => $props.large
      }
    ],

    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: {},
    $refs
  });
  return (
    <Stack__
      as={"div"}
      data-plasmic-name={"me"}
      data-plasmic-override={overrides.me}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      hasGap={true}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.me,
        { [sty.melarge]: hasVariant($state, "large", "large") }
      )}
    >
      <div
        className={classNames(projectcss.all, sty.freeBox___7KHzs, {
          [sty.freeBoxlarge___7KHzsbtrf]: hasVariant($state, "large", "large")
        })}
      >
        <PlasmicImg__
          data-plasmic-name={"img"}
          data-plasmic-override={overrides.img}
          alt={""}
          className={classNames(sty.img, {
            [sty.imglarge]: hasVariant($state, "large", "large")
          })}
          displayHeight={"auto"}
          displayMaxHeight={"none"}
          displayMaxWidth={"100%"}
          displayMinHeight={"0"}
          displayMinWidth={"0"}
          displayWidth={"auto"}
          loading={"lazy"}
          src={{
            src: "/plasmic/blank_website/images/_360F546762864GbcWzUQjIqxk2MhFwzyq10T3K6N0A0H0Jpg.jpg",
            fullWidth: 540,
            fullHeight: 360,
            aspectRatio: undefined
          }}
        />

        <h4
          data-plasmic-name={"h4"}
          data-plasmic-override={overrides.h4}
          className={classNames(
            projectcss.all,
            projectcss.h4,
            projectcss.__wab_text,
            sty.h4,
            { [sty.h4large]: hasVariant($state, "large", "large") }
          )}
        >
          {"IS"}
        </h4>
      </div>
      <div className={classNames(projectcss.all, sty.freeBox___6SGha)}>
        <hgroup
          data-plasmic-name={"hgroup"}
          data-plasmic-override={overrides.hgroup}
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.hgroup,
            { [sty.hgrouplarge]: hasVariant($state, "large", "large") }
          )}
        >
          <React.Fragment>
            {(() => {
              try {
                return (
                  $$.user.getUser().firstName + " " + $$.user.getUser().lastName
                );
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return "Iman Sjamhudi";
                }
                throw e;
              }
            })()}
          </React.Fragment>
        </hgroup>
        <sub
          data-plasmic-name={"sub"}
          data-plasmic-override={overrides.sub}
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.sub,
            { [sty.sublarge]: hasVariant($state, "large", "large") }
          )}
        >
          <React.Fragment>
            {(() => {
              try {
                return $$.user.getUser().email;
              } catch (e) {
                if (
                  e instanceof TypeError ||
                  e?.plasmicType === "PlasmicUndefinedDataError"
                ) {
                  return "indoomni@gmail.com";
                }
                throw e;
              }
            })()}
          </React.Fragment>
        </sub>
      </div>
    </Stack__>
  );
}

const PlasmicDescendants = {
  me: ["me", "img", "h4", "hgroup", "sub"],
  img: ["img"],
  h4: ["h4"],
  hgroup: ["hgroup"],
  sub: ["sub"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicMe__ArgProps,
          internalVariantPropNames: PlasmicMe__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicMe__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "me") {
    func.displayName = "PlasmicMe";
  } else {
    func.displayName = `PlasmicMe.${nodeName}`;
  }
  return func;
}

export const PlasmicMe = Object.assign(
  // Top-level PlasmicMe renders the root element
  makeNodeComponent("me"),
  {
    // Helper components rendering sub-elements
    img: makeNodeComponent("img"),
    h4: makeNodeComponent("h4"),
    hgroup: makeNodeComponent("hgroup"),
    sub: makeNodeComponent("sub"),
    // Metadata about props expected for PlasmicMe
    internalVariantProps: PlasmicMe__VariantProps,
    internalArgProps: PlasmicMe__ArgProps
  }
);

export default PlasmicMe;
/* prettier-ignore-end */
