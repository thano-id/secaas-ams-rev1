// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: qMKbWqzZjuHb1yLhCiN5Mq
// Component: isERhG8IUBG8
import * as React from "react";
import { useRouter } from "next/router";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import MainPageHeaderMinimal from "../../MainPageHeaderMinimal"; // plasmic-import: 8Q71FYMQzUgF/component
import SideMenuItem from "../../SideMenuItem"; // plasmic-import: fvhUR2yOqw0U/component
import SideMenuSectionHead from "../../SideMenuSectionHead"; // plasmic-import: lRSRG8YACsJd/component
import Me from "../../Me"; // plasmic-import: M7n-Yi6ESK-n/component
import { useScreenVariants as useScreenVariants_9QPfl0YfbSni } from "./PlasmicGlobalVariant__Mobile"; // plasmic-import: 9qPFL0yfbSNI/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: qMKbWqzZjuHb1yLhCiN5Mq/projectcss
import sty from "./PlasmicSideMenu.module.css"; // plasmic-import: isERhG8IUBG8/css
import Building3SvgrepoComSvgIcon from "./icons/PlasmicIcon__Building3SvgrepoComSvg"; // plasmic-import: Rf7C0Vgmu0Zn/icon
import UserCirlceAddSvgrepoComSvgIcon from "./icons/PlasmicIcon__UserCirlceAddSvgrepoComSvg"; // plasmic-import: aq1t0PjDqNmi/icon
import UserOctagonSvgrepoComSvgIcon from "./icons/PlasmicIcon__UserOctagonSvgrepoComSvg"; // plasmic-import: ZNIK1Plt2HkI/icon
import BookSavedSvgrepoComSvgIcon from "./icons/PlasmicIcon__BookSavedSvgrepoComSvg"; // plasmic-import: beTsf8tVlWYp/icon
import BuildingsSvgrepoComSvg2Icon from "./icons/PlasmicIcon__BuildingsSvgrepoComSvg2"; // plasmic-import: YnW0xt9auy5O/icon
import BuildingSvgrepoComSvgIcon from "./icons/PlasmicIcon__BuildingSvgrepoComSvg"; // plasmic-import: 8sTcdDxLmqNz/icon
import Archive2SvgrepoComSvgIcon from "./icons/PlasmicIcon__Archive2SvgrepoComSvg"; // plasmic-import: GmE4DgTrkmB4/icon

createPlasmicElementProxy;

export const PlasmicSideMenu__VariantProps = new Array();

export const PlasmicSideMenu__ArgProps = new Array();

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicSideMenu__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const globalVariants = ensureGlobalVariants({
    mobile: useScreenVariants_9QPfl0YfbSni()
  });
  return (
    <div
      data-plasmic-name={"sideMenu"}
      data-plasmic-override={overrides.sideMenu}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_antd_5_hostless_css.plasmic_tokens,
        plasmic_plasmic_rich_components_css.plasmic_tokens,
        sty.sideMenu
      )}
    >
      <MainPageHeaderMinimal
        data-plasmic-name={"mainPageHeaderMinimal"}
        data-plasmic-override={overrides.mainPageHeaderMinimal}
        className={classNames("__wab_instance", sty.mainPageHeaderMinimal)}
      />

      <div className={classNames(projectcss.all, sty.freeBox__atfDp)} />
      <SideMenuItem
        className={classNames("__wab_instance", sty.sideMenuItem__zyVgA)}
        subtitle={``}
        title={"Dashboard"}
      >
        <Building3SvgrepoComSvgIcon
          className={classNames(projectcss.all, sty.svg___9CIw)}
          role={"img"}
        />
      </SideMenuItem>
      <SideMenuItem
        className={classNames("__wab_instance", sty.sideMenuItem__rke4O)}
        subtitle={``}
        title={"Check in"}
      >
        <UserCirlceAddSvgrepoComSvgIcon
          className={classNames(projectcss.all, sty.svg__i4M7)}
          role={"img"}
        />
      </SideMenuItem>
      <SideMenuItem
        className={classNames("__wab_instance", sty.sideMenuItem__jP3KU)}
        subtitle={``}
        title={"Check out"}
      >
        <UserOctagonSvgrepoComSvgIcon
          className={classNames(projectcss.all, sty.svg__wdAL)}
          role={"img"}
        />
      </SideMenuItem>
      <SideMenuSectionHead
        className={classNames("__wab_instance", sty.sideMenuSectionHead__pq53G)}
        title={"Reports & Stats"}
      />

      <SideMenuItem
        className={classNames("__wab_instance", sty.sideMenuItem__uIij8)}
        subtitle={``}
        title={"Visitors"}
      >
        <BookSavedSvgrepoComSvgIcon
          className={classNames(projectcss.all, sty.svg__fdlEc)}
          role={"img"}
        />
      </SideMenuItem>
      <div className={classNames(projectcss.all, sty.freeBox__p4YV1)} />
      <SideMenuSectionHead
        className={classNames(
          "__wab_instance",
          sty.sideMenuSectionHead___8OBea
        )}
        title={"Settings & Parameters"}
      />

      <div
        className={classNames(projectcss.all, sty.freeBox__x859)}
        onClick={async event => {
          const $steps = {};
          $steps["goToPropertiesPage"] = true
            ? (() => {
                const actionArgs = { destination: `/user/properties` };
                return (({ destination }) => {
                  if (
                    typeof destination === "string" &&
                    destination.startsWith("#")
                  ) {
                    document
                      .getElementById(destination.substr(1))
                      .scrollIntoView({ behavior: "smooth" });
                  } else {
                    __nextRouter?.push(destination);
                  }
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["goToPropertiesPage"] != null &&
            typeof $steps["goToPropertiesPage"] === "object" &&
            typeof $steps["goToPropertiesPage"].then === "function"
          ) {
            $steps["goToPropertiesPage"] = await $steps["goToPropertiesPage"];
          }
        }}
      >
        <SideMenuItem
          className={classNames("__wab_instance", sty.sideMenuItem__nUziq)}
          subtitle={``}
          title={"Properties"}
        >
          <BuildingsSvgrepoComSvg2Icon
            className={classNames(projectcss.all, sty.svg___3EKrZ)}
            role={"img"}
          />
        </SideMenuItem>
      </div>
      <div
        className={classNames(projectcss.all, sty.freeBox__z7Csk)}
        onClick={async event => {
          const $steps = {};
          $steps["goToTenantsPage"] = true
            ? (() => {
                const actionArgs = { destination: `/user/tenants` };
                return (({ destination }) => {
                  if (
                    typeof destination === "string" &&
                    destination.startsWith("#")
                  ) {
                    document
                      .getElementById(destination.substr(1))
                      .scrollIntoView({ behavior: "smooth" });
                  } else {
                    __nextRouter?.push(destination);
                  }
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["goToTenantsPage"] != null &&
            typeof $steps["goToTenantsPage"] === "object" &&
            typeof $steps["goToTenantsPage"].then === "function"
          ) {
            $steps["goToTenantsPage"] = await $steps["goToTenantsPage"];
          }
        }}
      >
        <SideMenuItem
          className={classNames("__wab_instance", sty.sideMenuItem__kfUnI)}
          subtitle={``}
          title={"Tenants"}
        >
          <BuildingSvgrepoComSvgIcon
            className={classNames(projectcss.all, sty.svg__fIc4H)}
            role={"img"}
          />
        </SideMenuItem>
      </div>
      <SideMenuItem
        className={classNames("__wab_instance", sty.sideMenuItem__np3OH)}
        subtitle={``}
        title={"Master data"}
      >
        <Archive2SvgrepoComSvgIcon
          className={classNames(projectcss.all, sty.svg__c2Xk)}
          role={"img"}
        />
      </SideMenuItem>
      <div className={classNames(projectcss.all, sty.freeBox__wBPu)} />
      <div
        className={classNames(projectcss.all, sty.freeBox__rYzHi)}
        onClick={async event => {
          const $steps = {};
          $steps["goToProfilePage"] = true
            ? (() => {
                const actionArgs = { destination: `/user/profile` };
                return (({ destination }) => {
                  if (
                    typeof destination === "string" &&
                    destination.startsWith("#")
                  ) {
                    document
                      .getElementById(destination.substr(1))
                      .scrollIntoView({ behavior: "smooth" });
                  } else {
                    __nextRouter?.push(destination);
                  }
                })?.apply(null, [actionArgs]);
              })()
            : undefined;
          if (
            $steps["goToProfilePage"] != null &&
            typeof $steps["goToProfilePage"] === "object" &&
            typeof $steps["goToProfilePage"].then === "function"
          ) {
            $steps["goToProfilePage"] = await $steps["goToProfilePage"];
          }
        }}
      >
        <Me
          data-plasmic-name={"me"}
          data-plasmic-override={overrides.me}
          className={classNames("__wab_instance", sty.me)}
        />
      </div>
    </div>
  );
}

const PlasmicDescendants = {
  sideMenu: ["sideMenu", "mainPageHeaderMinimal", "me"],
  mainPageHeaderMinimal: ["mainPageHeaderMinimal"],
  me: ["me"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicSideMenu__ArgProps,
          internalVariantPropNames: PlasmicSideMenu__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicSideMenu__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "sideMenu") {
    func.displayName = "PlasmicSideMenu";
  } else {
    func.displayName = `PlasmicSideMenu.${nodeName}`;
  }
  return func;
}

export const PlasmicSideMenu = Object.assign(
  // Top-level PlasmicSideMenu renders the root element
  makeNodeComponent("sideMenu"),
  {
    // Helper components rendering sub-elements
    mainPageHeaderMinimal: makeNodeComponent("mainPageHeaderMinimal"),
    me: makeNodeComponent("me"),
    // Metadata about props expected for PlasmicSideMenu
    internalVariantProps: PlasmicSideMenu__VariantProps,
    internalArgProps: PlasmicSideMenu__ArgProps
  }
);

export default PlasmicSideMenu;
/* prettier-ignore-end */
